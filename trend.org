#+HTML_HEAD: -*- fill-column: 92 -*-

#+TITLE: Модуль Trend и тесты

#+NAME:css
#+BEGIN_HTML
<link rel="stylesheet" type="text/css" href="css/css.css" />
#+END_HTML

  одна и та же планировка может быть в двух очередях и даже в двух комплексах.

* Бизнес-процесс и цели

  Мы делаем сайт-аггрегатор всех квартир-новостроек в С-Пб.

  Есть застройщики, они строят и продают квартиры. Но для того чтобы реализовать объем квартир они
  не только используют свой отдел продаж, но и привлекают агенства реализации квартир за комиссию
  (агентское вознаграждение)

  Многие застройщики работают с 3-5 крупных агенств, которые в свою очередь привлекают других
  субагентов за комиссию.

  Цель сайта для нашей компании - инициировать обращение посетителя в компанию.

  Цель пользователя - найти квартиру под его возможности и потребности. На сайте пользователю
  предоставляется не вся информация по квартире, чтобы он имел стимул обратиться в нашу компанию,
  где его обработает менеджер по продажам.

  Посетитель на сайте выполняет поиск квартиры (основной пользовательский сценарий). Посетитель
  может выполнить расчет ипотеки, продать свою квартиру, заказать просмотр квартир итп
  (дополнительные сценарии).

  Цель сайта для менеджера - найти квартиру под любые параметры клиента и обеспечить ответ на
  любые вопросы клиента по застройщику и квартире.

  Причины обращений частных клиентов:
  - большой выбор и возможность получить ответы на все вопросы
  - ипотечный центр (берет на себя сложности с ипотекой)
  - показ квартир, который осуществляет компания:
    - индивидуальный показ (на автомобиле)
    - автобусные туры (срез по району) в выходные
  - реализация квартир клиентов (чтобы купить квартиру, клиенту иногда надо
    продать квартиру)
  - Люди не покупают квартиры с сайта. Им психологически сложно расстаться с такой большой суммой
    денег, поэтому они ищут иллюзии понимания этого рынка, которую предоставляет им менеджер
    компании.
  - Вторичку вообще продают через знакомых агентов. Поэтому практически единственное бизнес-value
    агенств вторички - широта связей их менеджеров. Все продается только через знакомых.

  Взаимодействие с застройщиками:
  - Застройщики регулярно отправляют информацию о объектах (или мы ее самостоятельно забираем). У
    поставщиков информация представлена в очень разных форматах. Мы конкурируем с отделом продаж
    застройщиков, поэтому они не заинтересованы предоставлять нам данные в нашем формате.
  - Небольшая часть застройщиков предоставляет данные через т.н. "агентский портал", куда
    менеджер компании может попасть по логину и паролю.
  - У ряда застройщиков есть достаточно актуальное наличие планировок на сайте.
  - Мы сопровождаем договора клиентов с застройщиком.

  Взаимодействие с агентствами:
  - Мы выступаем для суб-агентов в роли застройщика, отправляя им данные о квартирах.
  - Отдел диллерских продаж принимает обращения от агенств, бронируют квартиры.

  Стратегия: Сумма проданных компанией квартир = кол-во обращений клиентов компании * конверсия
  отдела продаж * кол-во менеджеров.

  Новый сайт необходим чтобы увеличить конверсию клик-обращение, и конверсию отдела продаж.

  Компания также хочет чтобы сайт был для пользователя более ценным чем сайты застройщиков, для
  этого планируются дополнительные сервисы - ипотечный калькулятор, расчет инвестиционной
  привлекательности, итп.

  Компания считает что сможет также сократить время обучения используя новый сайт.

  Какая-то часть обработки информации будет производиться контент-менеджерами вручную. Необходимо
  заложить возможности для них. Например: У застройщика есть базовая цена квартиры и регламент -
  как рассчитывать стоимость квартир, иногда очень сложный. Менеджер по развитию проектов должен
  иметь возможность создавать набор правил применяющихся в определенном порядке.

  Менеджер по продаже должен иметь возможность на странице квартиры накидать скидок (иногородний
  покупатель, итп), влиящих на цену квартиры. Это очень важное бизнес-требование.

  С точки зрения бизнес-процесса, продуктом компании яаляется специалист по недвижимости. Его
  время покупает клиент. Поэтому компания заинтересована:
  - Занять нишу ресурса, который позволяет выбрать квартиру в новостройке С-Пб.
  - Сэкономить на обучении специалистов.
  Основные проблемы на этом пути:
  - Товарная линейка ограничена
  - Актуальность данных
  - Юзабилити

* Пользователи и роли

  Пользователи объединены в роли по реализуемым на сайте сценариям. Некоторые сценарии
  являются общими для нескольких ролей, так например и =посетитель= и =менеджер= выполняют
  на сайте сценарии поиска квартир.

  Если кто-то логинится под логином и паролем под которым в данный момент сидит другой
  пользователь - реализуем перехват сессии - старый пользователь автоматически теряет
  сессию.

  Логин и пароль нужен и посетителю. Но он не будет регистрироваться, а скорее отправит на
  почту себе письмо со ссылкой на варианты которые он выбрал в избранном и сравнении.

  Роли и их типичные сценарии:
  - Посетитель
    - Поиск квартиры
    - Сравнение
    - Добавление в избранное
    - Печать
    - ...
  - Менеджер компании
    - Поиск квартиры
    - Сравнение
    - Добавление в избранное - избранное нужно как-то шарить клиенту.
    - Печать
    - ...
  - Контент-менеджер
    - Забивает информацию в базу
  - Менеджеры по развитию (продукт-менеджеры)
    - Создают правила расчета цен
    - Проверяют (пока раз в месяц) качество работы контент-менеджеров.
  - Менеджер субагента
    выпоняет примерно те же задачи что менеджер по продажам компании, но, возможно,
    использует
    меньше данных, чем сотрудник компании
  - Администратор сайта
    - Управляет пользователями
  - Робот
    - Загрузка данных со сторонних сайтов
    - Выгрузка данных на рекламные ресурсы

* Определения сущностей
** DONE Жилой комплекс (cmpx)

   Эта сущность нужна только чтобы объединять очереди жилого комплекса

   #+CAPTION: Данные жилого комплекса
   #+NAME: cmpx_data
     | field name  | field type           | note                 |
     |-------------+----------------------+----------------------|
     | id          | serial               | идентификатор        |
     | name        | varchar              | название             |
     | addr        | (or db-null varchar) | адрес                |
     | district-id | (or db-null integer) | идентификатор района |
     | metro-id    | (or db-null integer) | идентификатор метро  |


   #+NAME: cmpx_flds
   #+BEGIN_SRC emacs-lisp :var table=cmpx_data :results value :exports none :session gen
     table
   #+END_SRC

** DONE Очередь жилого комплекса (plex)

   #+CAPTION: Данные очереди жилого комплекса
   #+NAME: plex_data
     | field name  | field type           | note                           |
     |-------------+----------------------+--------------------------------|
     | id          | serial               | идентификатор                  |
     | cmpx-id     | integer              | идентификатор жилого комплекса |
     | name        | (or db-null varchar) | название                       |
     | distance    | (or db-null varchar) | расстояние до метро            |
     | deadline-id | (or db-null integer) | срок сдачи                     |
     | subsidy     | (or db-null boolean) | субсидия                       |
     | finishing   | (or db-null varchar) | отделка                        |
     | ipoteka     | (or db-null boolean) | ипотека                        |
     | installment | (or db-null boolean) | рассрочка                      |

   #+NAME: plex_flds
   #+BEGIN_SRC emacs-lisp :var table=plex_data :results value :exports none :session gen
     table
   #+END_SRC

** DONE Корпус очереди жилого комплекса (crps)

   #+CAPTION: Данные корпуса очереди жилого комплекса
   #+NAME: crps_data
     | field name | field type           | note                                   |
     |------------+----------------------+----------------------------------------|
     | id         | serial               | идентификатор                          |
     | plex-id    | integer              | идентификатор очереди жилого комплекса |
     | name       | (or db-null varchar) | название (номер корпуса)               |

   #+NAME: crps_flds
   #+BEGIN_SRC emacs-lisp :var table=crps_data :results value :exports none :session gen
     table
   #+END_SRC

** DONE Планировка (flat)

   #+CAPTION: Данные планировки
   #+NAME: flat_data
     | field name   | field type           | note                                           |
     |--------------+----------------------+------------------------------------------------|
     | id           | serial               | идентификатор                                  |
     | crps-id      | (or db-null integer) | идентификатор корпуса очереди жилого комплекса |
     | rooms        | (or db-null integer) | кол-во комнат                                  |
     | area-sum     | (or db-null varchar) | общая площадь квартиры (может быть дробное)    |
     | area-living  | (or db-null varchar) | жилая площадь квартиры (именно varchar)        |
     | area-kitchen | (or db-null varchar) | площадь кухни (может быть дробное)             |
     | price        | (or db-null integer) | цена                                           |
     | balcon       | (or db-null varchar) | балкон/лоджия                                  |
     | sanuzel      | (or db-null boolean) | Санузел раздельный/совмещенный                 |

   #+NAME: flat_flds
   #+BEGIN_SRC emacs-lisp :var table=flat_data :results value :exports none :session gen
     table
   #+END_SRC

** DONE Город (city)

   Город в котором находится объект

   #+CAPTION: Данные города
   #+NAME: city_data
     | field name | field type | note            |
     |------------+------------+-----------------|
     | id         | serial     | идентификатор   |
     | name       | varchar    | название города |

   #+NAME: city_flds
   #+BEGIN_SRC emacs-lisp :var table=city_data :results value :exports none :session gen
     table
   #+END_SRC

** DONE Район (district)

   Район города, в котором находится объект

   #+CAPTION: Данные района
   #+NAME: district_data
     | field name  | field type | note                                     |
     |-------------+------------+------------------------------------------|
     | id          | serial     | идентификатор                            |
     | name        | varchar    | название района |

   #+NAME: district_flds
   #+BEGIN_SRC emacs-lisp :var table=district_data :results value :exports none :session gen
     table
   #+END_SRC

** DONE Метро (metro)

   Метро неподалеку от объекта

   #+CAPTION: Данные метро
   #+NAME: metro_data
     | field name | field type | note             |
     |------------+------------+------------------|
     | id         | serial     | идентификатор    |
     | name       | varchar    | название станции |

   #+NAME: metro_flds
   #+BEGIN_SRC emacs-lisp :var table=metro_data :results value :exports none :session gen
     table
   #+END_SRC

** DONE Сроки сдачи (deadline)

   Сроки сдачи объектов

   #+CAPTION: Данные метро
   #+NAME: deadline_data
     | field name | field type | note             |
     |------------+------------+------------------|
     | id         | serial     | идентификатор    |
     | name       | varchar    | название станции |

   #+NAME: deadline_flds
   #+BEGIN_SRC emacs-lisp :var table=deadline_data :results value :exports none :session gen
     table
   #+END_SRC

** TODO Картинки очередей ЖК
** TODO Картинки планировок
** TODO Картинки хода строительства
* Загрузка данных

  В папке =./data= лежат ЖК, в каждом из них есть подпапки, в которых лежат очереди. Очереди
  в себе содержат подпапки, содержащие изображения:
  - Планировки
  - Рендеры
  - Ход строительства
  и файлы:
  - паспорт.txt - паспорт объекта
  - описание.txt - описание объекта
  - местоположение
  - комфорт
  - квартиры, в формате CSV
    |  корпус | тип | метраж | жилая площадь| площадь кухни | балкон/лоджия | санузел | цена |

** DONE Утилиты
   Напишем проход по всем этим директориям, но перед этим необходимо определить ряд
   вспомогательных макросов и функций.

   Начнем с макроса поиска файла в наборе. В случае, если файл найден, мы выполняем body

   #+NAME: awhen_file
   #+BEGIN_SRC lisp
     (in-package #:moto)

     (defmacro awhen-file ((file files) &body body)
       `(aif (find ,file ,files :test #'string=)
             ,@body
             ""))
   #+END_SRC

   Нам также понадобится цикл внутри директории, который умеет предоставлять нам
   поддиректории и файловое содержимое этих предоставленных поддиректорий.

   #+NAME: loop_dir
   #+BEGIN_SRC lisp
     (in-package #:moto)

     (defmacro loop-dir (var (&rest path) &body body)
       `(loop :for ,var :in (mapcar #'(lambda (x) (car (last (ppcre:split "\/" (directory-namestring x)))))
                                    (explore-dir (format nil "~A~{~A/~}*.*" *data-path* (list ,@path)))) :do
           (multiple-value-bind (_ files)
               (explore-dir (format nil "~A~{~A/~}~A/*.*" *data-path* (list ,@path) ,var))
             (declare (ignore _))
             (let ((files (mapcar #'(lambda (x) (car (last (ppcre:split "\/" (file-namestring x)))))
                                  files)))
               ,@body))))
   #+END_SRC

   Еще маленький вспомогательный макрос для извлечения значения по ключу из ассоциативного
   списка:

   #+NAME: assoc_key
   #+BEGIN_SRC lisp
     (in-package #:moto)

     (defmacro assoc-key (key alist)
       `(cdr (assoc ,key ,alist :test #'string=)))
   #+END_SRC

   Для работы с данными, извлекаемыми из файлов в формате ключ:значение напишем
   функцию-парсер:

   #+NAME: keyval
   #+BEGIN_SRC lisp
     (in-package #:moto)

     (defun keyval (filename)
       (remove-if #'null
                  (mapcar #'(lambda (in)
                              (let* ((pos (position #\: in :test #'char=)))
                                (if (null pos)
                                    (warn (format nil "wrong param: ~A" in))
                                    (let ((key (subseq in 0 pos))
                                          (val (subseq in (+ 1 pos))))
                                      (cons (string-trim '(#\Space #\Tab #\Newline)
                                                         (ppcre:regex-replace-all "\\s+" key " "))
                                            (string-trim '(#\Space #\Tab #\Newline)
                                                         (ppcre:regex-replace-all "\\s+" val " ")))))))
                          (ppcre:split #\Newline (alexandria:read-file-into-string filename)))))
   #+END_SRC

   Для работы с xls-файлами напишем парсер и декодер:

   #+NAME: xls
   #+BEGIN_SRC lisp
    (in-package #:moto)

    (defun decoder-3-csv  (in-string)
      "Второе возвращаемое значение показывает, была ли закрыта кавычка, или строка
           закончилась посередине обрабатываемой ячейки, что указывает на разрыв строки"
      (let ((err))
        (values
         (mapcar #'(lambda (y) (string-trim '(#\Space #\Tab) y))
                 (mapcar #'(lambda (y) (ppcre:regex-replace-all "\\s+" y " "))
                         (mapcar #'(lambda (y) (string-trim '(#\Space #\Tab #\") y))
                                 (let ((inp) (sav) (acc) (res))
                                   (loop :for cur :across in-string do
                                      ;; (print cur)
                                      (if (null inp)
                                          (cond ((equal #\" cur) (progn (setf inp t)
                                                                        ;; (print "open quote : inp t")
                                                                        ))
                                                ((equal #\, cur)  (progn (push "" res)
                                                                         ;; (print "next")
                                                                         ))
                                                ;; (t (print "unknown sign out of quite"))
                                                )
                                          ;; else
                                          (cond ((and (null sav) (equal #\" cur)) (progn (setf sav t)
                                                                                         ;; (print "close quote : sav t")
                                                                                         ))
                                                ((and sav (equal #\" cur)) (progn (setf sav nil)
                                                                                  ;; (print (list ".." #\"))
                                                                                  (push #\" acc)))
                                                ((and sav (equal #\, cur)) (progn (setf sav nil)
                                                                                  (setf inp nil)
                                                                                  (push (coerce (reverse acc) 'string) res)
                                                                                  ;; (print "inp f")
                                                                                  (setf acc nil)))
                                                ((equal #\Return cur)      nil)
                                                (t (progn (push cur acc)
                                                          ;; (print (list "." cur))
                                                          )))))
                                   (when acc
                                     ;; незакрытая кавычка
                                     (if (and inp (null sav))
                                         (setf err t))
                                     ;; (print (list ":" inp sav acc res))
                                     (push (coerce (reverse acc) 'string) res))
                                   (reverse res)))))
         err)))

    (defun xls-processor (infile)
      (let* ((result)
             (output (with-output-to-string (*standard-output*)
                       (let* ((proc (sb-ext:run-program "/usr/bin/xls2csv"
                                                        (list "-q3" (format nil "~a" infile)) :wait nil :output :stream)))
                         (with-open-stream (in (sb-ext:process-output proc))
                           (loop :for i from 1 do
                              (tagbody loop-body
                                 (handler-case
                                     (let ((in-string (read-line in)))
                                       (format nil "~A" in-string)
                                       ;; начинаем декодировать
                                       (tagbody start-decoding
                                          (multiple-value-bind (line err-string-flag)
                                              (decoder-3-csv in-string)
                                            (when err-string-flag
                                              (setf in-string (concatenate 'string in-string (read-line in)))
                                              ;; (format t "~%warn-broken-string [~a] ~a~%" i in-string)
                                              (incf i)
                                              (go start-decoding))
                                            (format t "~%~%str: ~a~%lin: ~a" in-string (bprint line))
                                            (unless (null line)
                                              (handler-case
                                                  (push line result)
                                                (SB-INT:SIMPLE-PARSE-ERROR () nil))
                                              )))
                                       )
                                   (END-OF-FILE () (return i)))))))
                       )))
        (declare (ignore output))
        ;; output
        (reverse result)))
  #+END_SRC

** START Загрузчик
   Теперь переходим к загрузке данных:

   #+NAME: loader
   #+BEGIN_SRC lisp
     (in-package #:moto)
     <<awhen_file>>
     <<loop_dir>>
     <<assoc_key>>
     <<keyval>>
     <<xls>>

     (defun clear-db-trend ()
       (let ((tables '("cmpx" "plex" "crps" "flat")))
         (flet ((rmtbl (tblname)
                  (when (with-connection *db-spec*
                          (query (:select 'table_name :from 'information_schema.tables :where
                                          (:and (:= 'table_schema "public")
                                                (:= 'table_name tblname)))))
                    (with-connection *db-spec*
                      (query (:delete-from (intern (string-upcase tblname))))))))
           (loop :for tblname :in tables :collect
              (rmtbl tblname)))))

     (defun load-data ()
       (clear-db-trend)
       ;; Для каждой подпапке в папке данных..
       (loop-dir cmpx ()
          ;; Создаем комплекс и заполняем адрес, если удалось найти соответствующий файл
            (format t "~%-~A" cmpx)
            (let ((cmpx-id (id (make-cmpx :name cmpx))))
              ;; Если найден файл с данными ЖК - обновим созданную очередь ЖК
              (awhen-file ("complex.txt" files)
                ;; Прочитать, разбить построчно, отделить ключи от значений, убрать ведущие, ведомые и повторяющиеся пробелы
                (let ((complex (keyval (format nil "~A~A/~A" *data-path* cmpx it))))
                  (format t "~% ~A - ~A" it (bprint complex))
                  (upd-cmpx (get-cmpx cmpx-id)
                            (list
                             :addr (assoc-key "Адрес" complex)
                             :district-id (let ((obj (find-district :name (assoc-key "Район" complex))))
                                            (if (null obj)
                                                (warn (format nil "Район ~A не найден в таблице районов" (assoc-key "Район" complex)))
                                                (id (car obj))))
                             :metro-id    (let ((obj (find-metro :name (assoc-key "Метро" complex))))
                                            (if (null obj)
                                                (warn (format nil "Метро ~A не найдено в таблице метро" (assoc-key "Метро" complex)))
                                                (id (car obj))))))))
              ;; Для каждой подпапки в папке комплекса, кроме планировок, рендеров и хода строительства:
              (loop-dir plex (cmpx)
                   (unless (or (string= plex "Планировки")
                               (string= plex "Рендеры")
                               (string= plex "Ход строительства"))
                     ;; Создаем очередь ЖК
                     (format t "~%--~A" plex)
                     (let ((plex-id (id (make-plex :name plex :cmpx-id cmpx-id))))
                       ;; Если найден файл с данными очереди ЖК - обновим созданную очередь ЖК
                       (awhen-file ("data.txt" files)
                         (let ((data (keyval (format nil "~A~A/~A/~A" *data-path* cmpx plex it))))
                           (format t "~%  ~A - ~A" it (bprint data))
                           (upd-plex (get-plex plex-id)
                                     ;; (assoc-key "Срок сдачи" '(("﻿Срок сдачи" . "2 квартал 2015") ("Субсидия" . "")
                                     ;;                           ("Отделка" . "предчистовая") ("Ипотека" . "да") ("Рассрочка" . "да")
                                     ;;                           ("Расстояние до метро" . "1.7 км (21 мин пешком)")))
                                     (list :deadline-id (let ((dd (assoc-key "Срок сдачи" data)))
                                                          (format t "~%   dd: ~A | ~A"
                                                                  dd
                                                                  (awhen (find-deadline :name (assoc-key "Срок сдачи" data))
                                                                    (id (car it))))
                                                          (awhen (find-deadline :name (assoc-key "Срок сдачи" data))
                                                            (id (car it))))
                                           :finishing   (assoc-key "Отделка" data)
                                           :ipoteka     (or (string= "да" (assoc-key "ипотека" data)))
                                           :installment (or (string= "да" (assoc-key "рассрочка" data)))
                                           :subsidy     (or (string= "да" (assoc-key "субсидия" data)))
                                           :distance    (assoc-key "Расстояние до метро" data)))
                           (format t "~%   rr: ~A" (deadline-id (get-plex plex-id)))
                           ))
                       ;; Для каждой подпапки в папке очереди ЖК, кроме планировок, рендеров и хода строительства:
                       (loop-dir crps (cmpx plex)
                            (unless (or (string= crps "Планировки")
                                        (string= crps "Рендеры")
                                        (string= crps "Ход строительства"))
                              ;; Создаем корпус
                              (format t "~%---~A" crps)
                              (let ((crps-id (id (make-crps :name crps :plex-id plex-id))))
                                ;; Если найден файл с планировками объекта
                                (awhen-file ("квартиры.xls" files)
                                  (loop :for item :in (cdr (xls-processor (format nil "~A~A/~A/~A/~A" *data-path* cmpx plex crps it))) :do
                                     (format t "~%   ~A" (bprint item))
                                     (make-flat :crps-id crps-id
                                                :rooms (parse-integer (nth 0 item))
                                                :area-sum (nth 1 item)
                                                :area-living (nth 2 item)
                                                :area-kitchen (nth 3 item)
                                                :balcon (nth 4 item)
                                                :sanuzel (if (string= "" (nth 5 item)) t nil)
                                                :price (parse-integer (nth 6 item)))))))))))))
       (format t "~%-=finish=-"))

     (load-data)
   #+END_SRC

* Точки входа

  Соберем шаблоны:

  #+NAME: trend_tpl
  #+BEGIN_SRC closure-template-html :tangle src/mod/trend/trend-tpl.htm :noweb tangle :exports code
    // -*- mode: closure-template-html; fill-column: 140 -*-
    {namespace trendtpl}

    <<trendtpl_contents>>
  #+END_SRC

  Скомпилируем шаблоны при подготовке модуля

  #+NAME: trend_prepare
  #+BEGIN_SRC lisp :tangle src/mod/trend/trend-prepare.lisp :noweb tangle :exports code
    (in-package #:moto)

    ;; Скомпилируем шаблон
    (closure-template:compile-template
     :common-lisp-backend
     (pathname
      (concatenate 'string *base-path* "mod/trend/trend-tpl.htm")))
  #+END_SRC

  Соберем контроллеры и все функции, которые контроллеры вызывают

  #+NAME: trend_fn
  #+BEGIN_SRC lisp :tangle src/mod/trend/trend.lisp :noweb tangle :exports code
    (in-package #:moto)

    <<flat_entity>>

    <<trend_fn_contents>>

    <<trend_test>>
  #+END_SRC

* Interface

  Соберем веб-интерфейс:

  #+NAME: iface
  #+BEGIN_SRC lisp :tangle src/mod/trend/iface.lisp :noweb tangle :exports code :padline no :comments link
    ;;;; iface.lisp

    (in-package #:moto)

    ;; Страницы
    <<iface_contents>>
  #+END_SRC

** Страничка загрузки данных

   #+NAME: iface_contents
   #+BEGIN_SRC lisp
     (in-package #:moto)

     ;; Страница загрузки данных
     (restas:define-route load-data-page ("/load")
       (with-wrapper
         (concatenate
          'string
          "<h1>Загрузка данных из файлов</h1>"
          (if (null *current-user*)
              "Error: Незалогиненные пользователи не имеют права загружать данные"
              (frm (tbl
                    (list
                     (row "" (let ((cmpx-s))
                               (loop-dir cmpx ()
                                    (push cmpx cmpx-s))
                               (format nil "~{~A<br/>~}<br />" cmpx-s)))
                     (row "" (hid "load"))
                     (row "" (submit "Загрузить")))))))))

     ;; Контроллер страницы регистрации
     (restas:define-route load-ctrl ("/load" :method :post)
       (with-wrapper
         (let* ((p (alist-to-plist (hunchentoot:post-parameters*))))
           (if (equal (getf p :load) "")
               (load-data)
               "err"))))
   #+END_SRC

** Список ЖК

 #+NAME: iface_contents
 #+BEGIN_SRC lisp

   (in-package #:moto)

   (define-page all-cmpx-s "/cmpxs"
     (concatenate 'string "<h1>" "Жилые комплексы" "</h1>" ""
                  "<br /><br />"
                  (tbl
                   (with-collection (cmpx (funcall #'all-cmpx))
                     (tr
                      (td
                       (format nil "<a href=\"/~a/~a\">~a</a>" "cmpx"
                       (id cmpx) (id cmpx)))
                      (td (name cmpx))
                      (td (addr cmpx))
                      (td (aif (district-id cmpx)
                               (name (get-district it))))
                      (td (aif (metro-id cmpx)
                               (name (get-metro it))))
                      (td (frm %del%))))
                   :border 1))
     (:del (act-btn "DEL" (id cmpx) "Удалить")
           (progn (del-cmpx (getf p :data)))))
 #+END_SRC

** Страница ЖК

   На самом деле это не карточка Жилищного Комплекса, а скорее карточка одной из его очередей,
   т.к. большинство параметров различаются между очередями. С другой стороны все очереди одного
   комплекса между собой связаны, так что нужна какая-то обьединяющая сущность.

   [[file:pics/Trend_complex20.png][Дизайн-макет: Карточка ЖК]]

   Если пользователь попал на эту страницу НЕ через поиск - ему надо
   показать кнопку "К поиску (378)", которая содержит кол-во
   вариантов при самых широких параметров поиска.

   Есть пользователь попал на эту страницу из выборки - эта кнопка
   должна вести на его выборку и содержать кол-во вариантов его
   выборки.

   Тут может быть мемоизация и предвычисления, которые мы на первом
   этапе можем не делать.

   Если пользователь зашел на этот обьект - этот объект нужно
   добавить в его "просмотренные".

   Отсюда пользователь может перейти к сценарию "сравнение",
   "добавить в избранное", "распечатать объект".

   Когда все квартиры в очереди закончились необходимо не удалять
   очередь с сайта, а убирать их в архив, чтобы она не показывалась в
   поиске, но были доступна администратору.

   Видим:
   - Название ЖК
   - Метро
   - Расстояние до метро
   - Район
   - Улица (или пересчение улиц)

   - Картинки (неограниченно, можно листать)
   - Минимальные цены в этом ЖК в формате "тип квартиры - цена -
     метры". При выборе этой ссылки мы сдвигаемся по странице до
     раздела "планировки и цены" где разворачивается аккордеон с
     выбранным им вариантом".
   - Возможность выбора очереди (с инфой о сроке сдачи)
     Когда пользователь выбирает другую очередь - он переходит на
     другую карточку (здесь очевидно нужна таблица связи)
   - Возможность выбора корпуса
     От корпуса зависят цены, карта корпусов, цены в разделе
     "планировки и цены", "преимущества"
   - Кнопка "все корпуса и цены", открывает pop-up "Очереди и корпуса"
   - Преимущества
   - Карта расположения корпусов комплекса
   - Карта объекта с ценой
   - Раздел планировки и цены
     - Форма поиска по квартирам (внутри квартир этой карточки)
       - Сортировка по цене (убыванию и возрастанию)
       - Выбор корпуса
       - Выбор кол-ва комнат
       - Стоимость квартиры (от .. до .. тыс.руб)
       - Первоначальный взнос, от ... до ...
       - Метраж
       - Кнопка поиска
     - Выдача, в аккордеоне, сгруппированные по кол-ву комнат, колонки
       - Номер корпуса
       - Кол-во комнат
       - Общая площадь
       - Жилая площадь
       - Площадь кухни
       - Балкон/лоджия
       - Санузел
       - Отделка
       - Первый взнос от ..
       - Цена с доп. скидками
       - Инвест. привлекательность
       - Добавить в сравнение?
       - Избранное?
       - Подробнее
       При клике на ячейку в таблице или на кнопку "подробнее" мы
       попадаем в карточку квартиры.
   - Картинки (еще раз)
   - Описание
   - Паспорт обьекта
     - Список параметров-значений, и параметры и значения могут добавлять контент-менеджеры.
   - Ход строительства диаграмма месяцев по годам, к каждому месяцу
     несколько фотографий
   - Кнопка "записаться на тур бесплатно"
   - Похожие предложения
     Как выбирать и группировать - непонятно.
     Нужно сделать алгоритм и вручную.
   - Регламент (условия продажи: 100% оплата, рассрочка, ипотека). В дизайне его нет. Надо ли его
     показывать клиентам.
   - Дата обновления. Показывать ли это клиентам?


 #+NAME: iface_contents
 #+BEGIN_SRC lisp

   (in-package #:moto)

   (define-page cmpx "/cmpx/:cmpx-id"
     (let* ((i (parse-integer cmpx-id))
            (cmpx (get-cmpx i)))
       (if (null cmpx)
           "Нет такого жилого комплекса"
           (format nil "~{~A~}"
                   (list
                    (format nil "<h1>Страница жилого комплекса ~A</h1>" (id cmpx))
                    (format nil "<h2>Данные комплекса ~A</h2>" (name cmpx))
                    (tbl
                     (with-element (cmpx cmpx)
                       (row "Название" (name cmpx))
                       (row "Адрес" (addr cmpx))
                       (row "Район" (aif (district-id cmpx)
                                         (name (get-district it))))
                       (row "Метро" (aif (metro-id cmpx)
                                         (name (get-metro it)))))
                     :border 1)
                    (format nil "<h2>Очереди комплекса ~A</h2>~%~A"
                            (name cmpx)
                            (tbl
                             (with-collection (i (find-plex :cmpx-id i))
                               (tr
                                (td
                                 (format nil "<a href=\"/~a/~a\">~a</a>" "plex"
                                         (id i) (id i)))
                                (td (name i)) (td (deadline i)) (td (frm %del%))))
                             :border 1))))))
     (:del (act-btn "DEL" (id i) "Удалить")
           (progn (del-plex (getf p :data)))))
 #+END_SRC

** Страница очереди ЖК

 #+NAME: iface_contents
 #+BEGIN_SRC lisp

   (in-package #:moto)

   (define-page plex "/plex/:plex-id"
     (let* ((i (parse-integer plex-id))
            (plex (get-plex i)))
       (if (null plex)
           "Нет такой очереди у этого жилого комплекса"
           (format nil "~{~A~}"
                   (list
                    (format nil "<h1>Страница очереди жилого комплекса</h1>")
                    (format nil "<h2>Данные очереди комплекса</h2>")
                    (tbl
                     (with-element (plex plex)
                       (row "Название" (name plex))
                       (row "Срок сдачи" (deadline plex))
                       (row "Субсидия" (subsidy plex))
                       (row "Отделка" (finishing plex))
                       (row "Ипотека" (ipoteka plex))
                       (row "Рассрочка" (installment plex))
                       (row "Расстояние до метро" (distance plex)))
                     :border 1)
                     (format nil "<h2>Корпуса очереди жилого комплекса</h2>~%~A"
                            (tbl
                             (with-collection (i (find-crps :plex-id i))
                               (tr
                                (td
                                 (format nil "<a href=\"/~a/~a\">~a</a>" "crps"
                                         (id i) (id i)))
                                (td (name i)) (td (frm %del%))))
                             :border 1))))))
     (:del (act-btn "del" (id i) "Удалить")
           (progn (del-plex (getf p :data)))))
 #+END_SRC

** Страница корпуса очереди ЖК

 #+NAME: iface_contents
 #+BEGIN_SRC lisp

   (in-package #:moto)

   (define-page crps "/crps/:crps-id"
     (let* ((i (parse-integer crps-id))
            (crps (get-crps i)))
       (if (null crps)
           "Нет такой очереди у этого жилого комплекса"
           (format nil "~{~A~}"
                   (list
                    (format nil "<h1>Страница корпуса очереди жилого комплекса</h1>")
                    (format nil "<h2>Данные очереди комплекса</h2>")
                    (tbl
                     (with-element (crps crps)
                       (row "Название" (name crps)))
                     :border 1)
                     (format nil "<h2>Планировки корпуса очереди жилого комплекса</h2>~%~A"
                            (tbl
                             (with-collection (i (find-flat :crps-id i))
                               (tr
                                (td
                                 (format nil "<a href=\"/~a/~a\">~a</a>" "flat"
                                         (id i) (id i)))
                                (td (format nil "~A к.кв." (rooms i)))
                                (td (format nil "~:d руб." (price i)))
                                (td (frm %del%))))
                             :border 1))))))
     (:del (act-btn "DEL" (id i) "Удалить")
           (progn (del-flat (getf p :data)))))
 #+END_SRC

** Страничка планировки

   [[file:pics/Trend_apartment02.png][Дизайн-макет: Карточка квартиры]]

   [[file:pics/Trend_apartment_print.png][Дизайн-макет: Карточка квартиры - версия для печати]]

   Есть вариант открывать карточку квартиры в pop-up окне. Но на каждую квартиру должна быть
   прямая ссылка - очевидно надо менять адресную строку. Также должна быть версия для печати,
   чтобы распечатать интересующий вариант.

   Менеджер по продаже должен иметь возможность на странице квартиры накидать скидок (иногородний
   покупатель, итп), влиящих на цену квартиры. Это очень важное бизнес-требование.

   Видим:
   - Пдф
   - Печать
   - Почта
   - Соцсети (шаринг)
   - Тип квартиры (студия, 1комнатная)
   - id
   - Цена при 100% оплате
   - Кнопка "подробности у менедждера" - ссылка на контакты

   Справа карточка комплекса идентичная поисковой выдачи - она оттуда
   и берется.

   - Планировка квартиры - рисунок
   - План этажа
   - Карта на который мы отмечаем где в корпусе расположена
     квартира - чтобы сориентироваться по виду.
   - Карта с минимальной ценой

   - Характеристики квартиры
     - Кол-во комнат
     - жилая площадь
     - общая площадь
     - Пллощадь кухни
     - Санузел
     - Отделка
     - Балкон
     Нужно иметь возможность добавлять сюда параметры

   - Сравнение
   - Избранное

   - Четыре ключевых преимущетва из ЖК

   - калькулятор ипотеки и рассрочки - отдельный кейс

   - Возможность баннеров (автобусные туры)

   - Инфо о жилом комплексе (потому что попадает в распечатку)

   - Сссылка "подробно о комплексе" - к ЖК

   - Квартиры в этом комплексе - ведут в карточку комплекса с
     открытыми двухкомнатными квартирами.

   - Сообщить об ошибке.

   - Когда было последнее обновление информации о квартире. Обновлено и дату. Чтобы менеджер
     видел актуальность. Показывать ли клиентам?

   Соберем шаблоны страницы планировки

   #+NAME: trendtpl_contents
   #+BEGIN_SRC closure-template-html
     {template flatpage}
         <<flatpage_tpl_contents>>
     {/template}
   #+END_SRC

  Соберем определения страниц

  #+NAME: iface_contents
  #+BEGIN_SRC lisp
    (in-package #:moto)

    ;; (restas:define-route flat ("/flat/:flatid")
    ;;   (with-wrapper
    ;;     (let ((flat (get-flat 1)))
    ;;       (trendtpl:flatpage
    ;;        (list
    ;;         <<flatpage_contents>>
    ;;         )))))
  #+END_SRC

 #+NAME: iface_contents
 #+BEGIN_SRC lisp

   (in-package #:moto)

   (define-page flat "/flat/:flat-id"
     (let* ((i (parse-integer flat-id))
            (flat (get-flat i)))
       (if (null flat)
           "Нет такой квартиры"
           (format nil "~{~A~}"
                   (list
                    (format nil "<h1>Страница квартиры</h1>")
                    (format nil "<h2>Данные квартиры</h2>")
                    (tbl
                     (with-element (flat flat)
                       (row "Кол-во комнат" (rooms flat))
                       (row "Общая площадь" (area-living flat))
                       (row "Площадь кухни" (area-kitchen flat))
                       (row "цена" (format nil "~:d"(price flat)))
                       (row "балкон/лоджия" (balcon flat))
                       (row "Санузел" (sanuzel flat))
                       (row "" (frm %buy%))
                       )
                     :border 1)))))
     (:buy (act-btn "BUY" "BUY" "Купить")
           (progn 1)))
 #+END_SRC

*** TODO Pop-up
    Есть вариант открывать карточку квартиры в pop-up окне. Но на каждую квартиру должна
    быть прямая ссылка - очевидно надо менять адресную строку.

*** TODO Версия для печати
    Также должна быть версия для печати, чтобы распечатать интересующий вариант.

*** TODO Менеджер хочет накидать скидок
    Менеджер по продаже должен иметь возможность на странице квартиры накидать скидок (иногородний
    покупатель, итп), влиящих на цену квартиры. Это очень важное бизнес-требование.
*** TODO Pdf-версия
*** TODO Отправить на почту
*** TODO Рассказать в социальных сетях
*** Тип квартиры

    #+NAME: flatpage_tpl_contents
    #+BEGIN_SRC closure-template-html
      {$rooms | noAutoescape}
      <br />
    #+END_SRC

    Тип квартиры показывается исходя из кол-ва комнат:

    #+NAME: flatpage_contents
    #+BEGIN_SRC lisp
      :rooms (let ((r (rooms flat)))
               (cond ((equal 0 r) "Квартира-студия")
                     ((equal 1 r) "1-комнатная квартира")
                     ((equal 2 r) "2-комнатная квартира")
                     ((equal 3 r) "3-комнатная квартира")
                     ((equal 4 r) "4-комнатная квартира")
                     (t (err "unknown rooms value"))))
    #+END_SRC

*** Идентификатор квартиры

    #+NAME: flatpage_tpl_contents
    #+BEGIN_SRC closure-template-html
      id: {$id | noAutoescape}
      <br />
    #+END_SRC

    Идентификатор квартиры показывается для быстрого доступа

    #+NAME: flatpage_contents
    #+BEGIN_SRC lisp
      :id (id flat)
    #+END_SRC

*** Цена при 100% оплате

    #+NAME: flatpage_tpl_contents
    #+BEGIN_SRC closure-template-html
      Цена квартиры при 100% оплате: {$price | noAutoescape}
      <br />
    #+END_SRC

    #+NAME: flatpage_contents
    #+BEGIN_SRC lisp
      :price (price flat)
    #+END_SRC

*** Кнопка "подробности у менедждера"

    ссылка на контакты

    #+NAME: flatpage_tpl_contents
    #+BEGIN_SRC closure-template-html
      <a href="/contacts">Подробности у менеджера</a>
      <br />
    #+END_SRC
*** TODO Карточка комплекса

    Справа карточка комплекса идентичная поисковой выдачи - она оттуда
    и берется.

    - Планировка квартиры - рисунок
    - План этажа
    - Карта на который мы отмечаем где в корпусе расположена
      квартира - чтобы сориентироваться по виду.
    - Карта с минимальной ценой

*** TODO Характеристики квартиры

    Нужно иметь возможность добавлять сюда параметры, но в первом прототипе мы это пока не
    делаем

    #+NAME: flatpage_tpl_contents
    #+BEGIN_SRC closure-template-html
      <br />
      <div style="border: 1px solid blue;">
          Кол_во комнат: {$rooms | noAutoescape}
          <br />
          Жилая площадь: {$area_living | noAutoescape}
          <br />
          Общая площадь: {$area_sum | noAutoescape}
          <br />
          Пллощадь кухни: {$area_kitchen | noAutoescape}
          <br />
          Санузел: {$sanuzel | noAutoescape}
          <br />
          Отделка: {$finishing | noAutoescape}
          <br />
          Балкон: {$balcon | noAutoescape}
          <br />
      </div>
      <br />
    #+END_SRC

    #+NAME: flatpage_contents
    #+BEGIN_SRC lisp
      :rooms (rooms flat)
      :area_living (area-living flat)
      :area_sum (area-sum flat)
      :area_kitchen (area-kitchen flat)
      :sanuzel (sanuzel flat)
      :finishing (finishing flat)
      :balcon (balcon flat)
    #+END_SRC

*** TODO Добавить в сравнение
*** TODO Добавить в избранное
*** TODO Четыре ключевых преимущетва из ЖК
*** TODO калькулятор ипотеки и рассрочки - отдельный кейс
*** TODO Возможность баннеров (автобусные туры)
*** TODO Инфо о жилом комплексе (потому что попадает в распечатку)
*** TODO Сссылка "подробно о комплексе" - к ЖК
*** TODO Квартиры в этом комплексе - ведут в карточку комплекса с открытыми двухкомнатными квартирами.
*** TODO Сообщить об ошибке.
*** TODO Когда было последнее обновление информации о квартире.
    Обновлено и дату. Чтобы менеджер видел актуальность. Показывать ли клиентам?

** START Поиск квартиры в новостройке

   Клиент может искать квартиру используя =простой поиск= или =расширенный поиск=. В сложном
   поиске больше параметров. В обоих случаях он получает одну и ту же выдачу, которая может быть
   представлена в двух разных форматах: =поисковая выдача с картой= или =поисковая выдача
   таблицей=.

   Экcпертов также часто интересует id квартиры - при вводе в строку поиска числового значения,
   находится должен искомый объект.

*** START Простой поиск

    [[file:pics/Trend_mainpage.png][Дизайн-макет: Простой поиск на главной странице]]

    При поиске клиенту интересны следующие параметры:
    - Район
    - Метро
    - Название жилищного комплекса
    - Количество комнат
    - Срок сдачи (не позднее)
    - Стоимость квартиры

    Требуется выводить подсказки в поисковой строке
    [[file:pics/Trend_mainpage07.png][Пример подсказок в дизайн-макете]]

    Пользователь, выполнивший простой поиск попадает в выдачу.

    #+NAME: iface_contents
    #+BEGIN_SRC lisp

      (in-package #:moto)

      (define-page findpage "/find"
        (format nil "~{~A~}"
                (list
                 (format nil "<h1>Страница поиска</h1>")
                 (format nil "<h2>Простой поиск</h2>")
                 (frm
                  (tbl
                   (list
                    (row "Район"
                      (select ("district")
                        (list* (list "Не важен" "0")
                               (with-collection (i (all-district))
                                 (list (name i)
                                       (id i))))))
                    (row "Метро"
                      (select ("metro")
                        (list* (list "Любое" "0")
                               (with-collection (i (all-metro))
                                 (list (name i)
                                       (id i))))))
                    (row "Название ЖК"
                      (select ("cmpx")
                        (list* (list "Любой ЖК" "0")
                               (with-collection (i (all-cmpx))
                                 (list (name i)
                                       (id i))))))
                    (row "Кол-во комнат"
                      (tbl
                       (list
                        (row "" "Выберите не менее одного варианта")
                        (row (input "checkbox" :name "studio" :value t) "Студия")
                        (row (input "checkbox" :name "one" :value t) "Однокомнатная")
                        (row (input "checkbox" :name "two" :value t) "Двухкомнатная")
                        (row (input "checkbox" :name "three" :value t) "Трехкомнатная"))))
                    (row "Срок сдачи (не позднее)"
                      (select ("deadline")
                        (list* (list "Не важен" "0")
                               (with-collection (i (all-deadline))
                                 (list (name i)
                                       (id i))))))
                    (row "Стоимость квартиры"
                      (tbl
                       (list
                        (row "" "Обязательные поля")
                        (row "от" (fld "price-from"))
                        (row "до" (fld "price-to")))))
                    (row "" %find%))
                   :border 1)
                  :action "/results")))
        (:find (act-btn "FIND" "FIND" "Искать")
               "Err: redirect to /results!"))
   #+END_SRC

*** Расширенный поиск

    [[file:pics/Trend_mainpage_search.png][Дизайн-макет: Расширенный поиск на главной странице]]

    Все тоже самое что и в =простом поиске=, но:

    - Вместо "Срока сдачи" можно задать интервал (от ... до ...) тоже списком выбора
    - Добавляется блок "ипотека", в котором есть "первоначальный взнос" и "ежемесячный
      платеж". Клиент должен ввести число либо в одно поле либо в другое.
    - Рассрочка - либо "первоначальный взнос" либо "ежемесячный платеж". Если клиент готов
      рассматривать или ипотеку или рассрочку - то в выдаче мы выдаем и те и другие варианты
    - Метраж (от ... до ...)
    - Субсидия (галочка) - квартиру можно приобрести с помощью жилищного сертификата, который
      покрывает часть стоимости квартиры. Это можно объяснять всплывающей подсказкой
    - Отделка (галочка) - если клиент ставит галочку, то мы выдаем только те квартиры в которых
      есть обои, раковины и можно сразу жить.
    - Инвестиционная привлекательность удорожание в процентах или предоставить форму с двумя полями:
      - Сумма которую хочет инвестировать клиент
      - Срок на который хочет инвестировать клиент (поквартально)



    Также нужен поиск по расстоянию до метро, но мы будем стараться чтобы этот параметр был
    доступен только для менеджера компании

*** Поисковая выдача с картой

    [[file:pics/Trend_search12_map.png][Дизайн-макет: Поисковая выдача с картой]]

    Выдача отдается в две колонки - слева список, включающий:
    - Фото комплекса
    - Название
    - Район
    - Метро
    - Расстояние до метро
    - Срок сдачи
    - Тип отделки
    - Ипотека (если есть)
    - Рассрочка (если есть)
    - Цена квартир которых он искал (от...). Если он в поиске выбрал и
      однушку и двушку и трешку показывается самое дешевое с метражом
    - Цена всех вариантов (однушку и двушку и трешку), по клику на
      плюсике (с метражом)
    - В избранное
    - В сравнение

    В правой колонке выводятся маркеры на карте, содержащие цену и синхронизированные со списком
    выдачи (рамки при наведении итп)

    При этом при скроллировании карта остается на месте, а выдача прокручивается.

    Сортировать можно:
    - по цене туда и обратно
    - по сроку сдачи
    - по району
    - по станции метро
    - возможно, по расстоянию до метро

    Надо указывать число найденных комплексов.

    Возможность переключения между выдачей на карте и выдачей списком

    Нажимая на элемент выдачи он попадает в карточку ЖК

    После выдачи идет блок похожих предложений, но возможно откажемся от этого блока здесь.

*** START Поисковая выдача таблицей

    [[file:pics/Trend_search11_list.png][Дизайн-макет: Поисковая выдача таблицей]]

    Выдается таблица с колонками:
    - Район
    - Название ЖК
    - Станция метро
    - До метро
    - Срок сдачи
    - Отделка
    - Ипотека/Рассрочка
    - Кол-во комнат
    - Общая площадь
    - Цена с доп. скидками
    - Цена всех вариантов (однушку и двушку и трешку), по клику на
      плюсике (с метражом)
    - В избранное
    - В сравнение

    Сортировать необходимо по столбцам.

    Нажимая на элемент выдачи он попадает в карточку ЖК

    После выдачи идет блок похожих предложений, но возможно откажемся от этого блока здесь.

    #+NAME: iface_contents
    #+BEGIN_SRC lisp
      (in-package #:moto)

      (defmacro find-query (price-from price-to &optional &key district metro deadline cmpx studio one two three)
        `(with-connection *db-spec*
           (query
            (:limit
             (:select (:as 'district.name 'district)  (:as 'cmpx.name 'cmpx)
                      (:as 'metro.name    'metro)     'distance
                      (:as 'deadline.name 'deadline)  'finishing
                      'ipoteka  'installment  'rooms  'area-sum  'price
                      :from 'flat
                      :inner-join 'crps :on (:= 'flat.crps_id 'crps.id)
                      :inner-join 'plex :on (:= 'crps.plex_id 'plex.id)
                      :inner-join 'cmpx :on (:= 'plex.cmpx_id 'cmpx.id)
                      :inner-join 'district :on (:= 'cmpx.district_id 'district.id)
                      :inner-join 'metro :on (:= 'cmpx.metro_id 'metro.id)
                      :inner-join 'deadline :on (:= 'plex.deadline_id 'deadline.id)
                      :where (:and ,(remove-if #'null
                                               `(:or ,(when studio `(:= 'rooms 0))
                                                     ,(when one    `(:= 'rooms 1))
                                                     ,(when two    `(:= 'rooms 2))
                                                     ,(when three  `(:= 'rooms 3))))
                                   (:and (:> 'price ,price-from)
                                         (:< 'price ,price-to))
                                   ,(if district
                                        `(:= 'district_id ,district)
                                        t)
                                   ,(if metro
                                        `(:= 'metro_id ,metro)
                                        t)
                                   ,(if deadline
                                        `(:<= 'deadline_id ,deadline)
                                        t)
                                   ,(if cmpx
                                        `(:= 'cmpx_id ,cmpx)
                                        t)))
             2000))))

      (define-page results "/results"
        (format nil "~{~A~}"
                (list
                 (format nil "<h1>Страница поиска</h1>")
                 (format nil "<h2>Простой поиск</h2>")
                 "Пустой поисковый запрос"))
        (:find (act-btn "FIND" "FIND" "Искать")
               (format nil "~{~A~}"
                       (list
                        (format nil "~%<h1>Страница поиска</h1>")
                        (format nil "~%<h2>Выборка</h2>")
                        (format nil "~%<br /><br />Параметры поиска: ~A" (bprint p))
                        (format nil "~%<br /><br />~A"
                                (let* ((form `(find-query
                                               ,(parse-integer (getf p :price-from))
                                               ,(parse-integer (getf p :price-to))
                                               )))
                                  (unless (equal "0" (getf p :district))
                                    (setf form (append form (list :district (parse-integer (getf p :district))))))
                                  (unless (equal "0" (getf p :metro))
                                    (setf form (append form (list :metro (parse-integer (getf p :metro))))))
                                  (unless (equal "0" (getf p :deadline))
                                    (setf form (append form (list :deadline (parse-integer (getf p :deadline))))))
                                  (unless (equal "0" (getf p :cmpx))
                                    (setf form (append form (list :cmpx (parse-integer (getf p :cmpx))))))
                                  (when (getf p :studio)
                                    (setf form (append form (list :studio t))))
                                  (when (getf p :one)
                                    (setf form (append form (list :one t))))
                                  (when (getf p :two)
                                    (setf form (append form (list :two t))))
                                  (when (getf p :three)
                                    (setf form (append form (list :three t))))
                                  (format nil "~%<br /><br />Запрос: ~A~%<br /><br />Результат: <br/><br />~A"
                                          (bprint form)
                                          (format nil "<table border=1><tr>~{~A~}</tr>~{~A~}</table>"
                                                  (loop :for item :in '("Район" "Комплекс" "Метро" "Расстояние" "Срок сдачи"
                                                                        "Отделка" "Ипотека" "Рассрочка" "Кол-во комнат" "Общая площадь" "Цена") :collect
                                                     (format nil "~%<th>~A</th>" item))
                                                  (loop :for item :in (eval form) :collect
                                                     (format nil "~%<tr>~{~A~}</tr>"
                                                             (loop :for item :in item :collect
                                                                (format nil "~%<td>&nbsp;~A&nbsp;</td>" item))))))))))))
   #+END_SRC

* Проект CRM-системы для отдела продаж

  Обращение стоит денег, его надо оформлять в объект базы CRM - чтобы
  не терялись. В первую очередь необходимо зафиксировать телефон, с
  которого звонит клиент

* Сценарии использования
** Просто карта

   Макета нет, но можно ориентировать на Trend_search_map.

   Title: Все ЖК.

   ostrovok.ru

   Закрыть карту.

   Нам надо развернуть карту на целый экран или свернуть чтобы показть выборку.

   Надо подумать делать просто большую карту или вместе с выборкой и фильтрами

   По умолчанию открыватся большая, после клика на маркер нужно что-то показать об выбранном
   комплексе. Можно попапом, или в карту уменьшить и сбоку.

   Все комплексы.

   Карта не должна скроллиться

** Поиск вторичного жилья

   В первом релизе не будет.

   Вторичное жилье не так критично, т.к. занимает 1% от
   реализаций, ему можно оставить только простой поиск.

   Для вторички нет срока сдачи, но есть тип дома (список выбора)

   Экпертов также часто интересует id обьекта - при вводе в строку
   поиска числа находится должен искомый объект. id должен печататься
   и на карточке квартиры, для того чтобы, можно было по телефону
   объяснить о каком объекте идет речь.

** Ипотечный калькулятор в карточке квартиры

   Задачи:
   - Показать клиенту что он может взять квартиру в ипотеку
   - Дать клиенту возможность оценить свои возможности, поиграв с калькулятором.

   Мы должны иметь возможность присваивать программы =корпусу очереди=. У одного корпуса может быть
   множество разных программ от множества разных банков.  На карточке квартиры нужно показать
   расчет с эвристически лучшей программой - например, с самой низкой процентной ставкой и самым
   длинным сроком кредита - но есть вариант рекомендовать это вручную.  Мы не показываем ему инфу
   по программе банка (даже наименование банка не светим), чтобы он консультировался с нашим
   специалистом. Но менеджеры получают подробную инфу.

   Параметры:
   - Стоимость квартиры (мин 10% от стоимости квартиры) - не давать клиенту забить меньше
   - Первоначальный взнаос (мин 10%) - не давать клиенту забить меньше
   - Срок кредита (макс 25 лет)
   - Процентная ставка % в год - по идее если клиенту показывается оптимальный банк то он не
     должен мочь ее менять.
   - Менеджеру видно банки, % и ежемесячный платеж.
   Результат
   - Ежемесячный платеж

** Ипотечный калькулятор в отдельном разделе

   Ипотечный калькулятор используется клиентом чтобы расчитать ипотеку неважно для какой
   квартиры. После рассчета можно отдать клиенту выборку подходящих квартир.

   Есть банки, у них есть "программы". Мы дожны создавать базу по банкам и их программам. У
   программы банка есть:
   - Наименование
   - Максимальный срок кредита
   - Процентная ставка
   - Минимальный первый взнос в процентах.

   Сценарии проговаривать с ипотечниками - уточнять по ходу дела.

   Варианты расчета:
   - Отталкиваемся от дохода
     - Ставим максммальный срок
     - Подбираем сумму кредита (доход 50.000, может ли взять 2.000.000)
     - Определяем ежемесячный платеж - смотрим сможет ли платить.
     - Манипулируем суммами чтобы учесть все интересы.
   - Отталкиваемся от максимального размера ежемесячный платежей
   - Отталкиваемся от максимального срока погашения (из-за возраста)
   - Отталкиваемся от единственного банка или от суммы кредита

** Калькулятор рассрочки

   Чем сложнее чем ипотечный калькулятор?

   Если мы говорм про рассрочку, то параметры там те же самые что и в ипотеке:
   - мин перв взнос
   - срок
   - процент
   но если вносишь 10% и платишь за 2 года, то тебе такая процентная ставка
   Там очень много программ и все они зависят сложным образом от входных параметров, которых
   неопределенное число, и иногда даже зависит от типа квартир или, например, от этажности, акции
   и фазы луны.

   Застройщик делает программы рассрочки со сложными условиями..

   Как формализовать условия? У нас есть менеддеры по внутреннему развитию проектов. Они умеют
   делать экселевские калькуляторы для себя. Также многие застройщики деляют экселевские файлы для
   рассчетов своих рассрочек.

** Запись на демонстрацию квартир
   Просто форма заявки, пусть клиент запоняет.
** Похожие предложения
   Первый вариант - назначает менеджер вручную, в первом релизе можно ограничиться им.
   Второй вариант - назначить алгоритмом:
   - Берем за базу цену, отсекаем все что выходит за коридор цены.
   - Срок сдачи (коридор срока)
   - Район (тут все сложно - рядом по территориальности, например)
   Вариант:
** Продажа своей квартиры
   Ссылка на контакты пока или форму заявки.
** Обращение в компанию
   Контакты
** Подписка на рассылку
   В первом релизе можно обойтись без нее.
   Рассылка долждна быть в нескольких вариантах.
   - Возможность подписаться на новости по конкретному объекту
   - Возможность подписать на инвестиционные предложения, которые мы сами генерируем
   - Подписка на старте продаж.
** Сравнение
   Trend_comparisioon

   В сравнение можно добавлять и жилые комплексы и квартиры. Если человек добавляет квартиру, то
   ЖК добавляется автоматически.

   О ЖК:

   При нажатии менеджером "отправить на почту" нужно генерировать ссылку с этими объектами,
   добавленными в сравнение. Это нужно чтобы отдать клиенту "на подумать".

   Карта с объектами с автоматическим расчетом центра и масштаба

   Скроллер влево-вправо
   Сердечко - добавить в избранное
   Удалить их сравнения
   Блок "о комплексе"
   - Рендер (кликабельно в объект)
   - Название ЖК и очередь
   - Район
   - Метро и расстояние до него
   - Срок сдачи
   - Цена минимальных квартир
   - Тип отделки
   - Ипотека с указанием макс срока
   - Рассрочка с указанием макс срока
   - Стандартный блок "тип квартиры- цена от - метраж по всем типам квартир"
   Блок сравнения по паспорту объекта
   ... поднимаем из комплекса

   О квартирах:
   - Сердечко - добавить в избранное
   - Удалить их сравнения
   - Планировка (картинка с увеличением)
   - Сравнение по данным таблицы по квартирам, которую мы описывали в карточке ЖК.

** Избранное

   Trend_favorite_map

   Избранное согласно поисковой выдаче. Все так же, только избранное.
   Но в избранном может быть как комплекс так и квартира. Как отображать это таблицей -
   понятно. А как отображать на карте?

** "Просмотрено" - список объектов просмотренных пользователем ранее
   Отображается точно также как избранное, но заносим мы туда только комплексы, без
   квартир. Непонятно почему?

** Хранение и визуализация истории цен по объекту (!) (менеджер и возможно клиент)
   Это нужно чтобы показать клиенту инвестиционную привлекательность квартиры в этом корпусе.

   График с четырьмя кривыми цен по типам квартиры.

   Нам нужна цена квадратного метра в зависимости от типа квартиры.

   Контенщик или робот заносит в базу базовую цену квадратного метра (разную в зависимости от
   типа квартиры)
** Внесение данных контентщиком
** Внесение данных объектов роботом
** Скачать pdf
* Тесты

  #+NAME: trend_test
  #+BEGIN_SRC lisp

    ;; Тестируем trend
    (defun trend-test ()
      <<trend_test_contents>>
      (dbg "passed: trend-test~%"))
    (trend-test)
  #+END_SRC

  #+NAME: trend_test_contents
  #+BEGIN_SRC lisp

  #+END_SRC
* Остальное

  Элементарный поиск (то что есть на существующем сайте)
  Карточки квартир
  Поиск по большому кол-ву параметров:
  - первый взнос
  - платеж в месяц
  - инвестиционная привлекательность
  - ...
  Личный кабинет менеджера
  - Графики чтобы обосновать клиенту инвест. привлекательность
  - Статистика работы менеджеров
  - ...
* Конкуренты
  cian.ru
  петербургская недвижимость
  миан
  миель
  инком
  ндв-недвижимость
* Инвест-привлекательность:

  В идеале для клиента надо предоставить форму с двумя полями:
  - Сумма которую хочет инвестировать клиент
  - Срок на который хочет инвестировать клиент

  И система автоматически подберет ему подходящие варианты (из числа заранее отобранных
  менеджерами компании)

* Сборка
** Сущности и автоматы

   Соберем все сущности и автоматы

   #+NAME: entity_and_automates
   #+BEGIN_SRC lisp :tangle src/mod/trend/entityes.lisp :noweb tangle :exports code :padline no :comments link
     (in-package #:moto)

     <<asm_cmpx()>>

     <<asm_plex()>>

     <<asm_crps()>>

     <<asm_flat()>>

     <<asm_city()>>

     <<asm_district()>>

     ;; Районы города
     (make-district :name "Адмиралтейский")
     (make-district :name "Василеостровский")
     (make-district :name "Выборгский")
     (make-district :name "Калининский")
     (make-district :name "Кировский")
     (make-district :name "Колпинский")
     (make-district :name "Красногвардейский")
     (make-district :name "Красносельский")
     (make-district :name "Кронштадтский")
     (make-district :name "Курортный")
     (make-district :name "Московский")
     (make-district :name "Невский")
     (make-district :name "Петроградский")
     (make-district :name "Петродворцовый")
     (make-district :name "Приморский")
     (make-district :name "Пушкинский")
     (make-district :name "Фрунзенский")
     (make-district :name "Центральный")
     (make-district :name "Всеволожкси")

     ;; Районы области
     (make-district :name "Бокситогорский")
     (make-district :name "Волосовский")
     (make-district :name "Волховский")
     (make-district :name "Всеволожский")
     (make-district :name "Выборгский")
     (make-district :name "Гатчинский")
     (make-district :name "Кингисеппский")
     (make-district :name "Киришский")
     (make-district :name "Кировский")
     (make-district :name "Лодейнопольский")
     (make-district :name "Ломоносовский")
     (make-district :name "Лужский")
     (make-district :name "Подпорожский")
     (make-district :name "Приозерский")
     (make-district :name "Сланцевский")
     (make-district :name "Тихвинский")
     (make-district :name "Тосненский")

     <<asm_metro()>>

     (make-metro :name "Автово")
     (make-metro :name "Адмиралтейская")
     (make-metro :name "Академическая")
     (make-metro :name "Балтийская")
     (make-metro :name "Бухарестская")
     (make-metro :name "Василеостровская")
     (make-metro :name "Владимирская")
     (make-metro :name "Волковская")
     (make-metro :name "Выборгская")
     (make-metro :name "Горьковская")
     (make-metro :name "Гостиный двор")
     (make-metro :name "Гражданский проспект")
     (make-metro :name "Девяткино")
     (make-metro :name "Достоевская")
     (make-metro :name "Елизаровская")
     (make-metro :name "Звёздная")
     (make-metro :name "Звенигородская")
     (make-metro :name "Кировский завод")
     (make-metro :name "Комендантский проспект")
     (make-metro :name "Крестовский остров")
     (make-metro :name "Купчино")
     (make-metro :name "Ладожская")
     (make-metro :name "Ленинский проспект")
     (make-metro :name "Лесная")
     (make-metro :name "Лиговский проспект")
     (make-metro :name "Ломоносовская")
     (make-metro :name "Маяковская")
     (make-metro :name "Международная")
     (make-metro :name "Московская")
     (make-metro :name "Московские ворота")
     (make-metro :name "Нарвская")
     (make-metro :name "Невский проспект")
     (make-metro :name "Новочеркасская")
     (make-metro :name "Обводный канал")
     (make-metro :name "Обухово")
     (make-metro :name "Озерки")
     (make-metro :name "Парк Победы")
     (make-metro :name "Парнас")
     (make-metro :name "Петроградская")
     (make-metro :name "Пионерская")
     (make-metro :name "Площадь Александра Невского")
     (make-metro :name "Площадь Александра Невского")
     (make-metro :name "Площадь Восстания")
     (make-metro :name "Площадь Ленина")
     (make-metro :name "Площадь Мужества")
     (make-metro :name "Политехническая")
     (make-metro :name "Приморская")
     (make-metro :name "Пролетарская")
     (make-metro :name "Проспект Большевиков")
     (make-metro :name "Проспект Ветеранов")
     (make-metro :name "Проспект Просвещения")
     (make-metro :name "Пушкинская")
     (make-metro :name "Рыбацкое")
     (make-metro :name "Садовая")
     (make-metro :name "Сенная площадь")
     (make-metro :name "Спасская")
     (make-metro :name "Спортивная")
     (make-metro :name "Старая Деревня")
     (make-metro :name "Технологический институт")
     (make-metro :name "Технологический институт")
     (make-metro :name "Удельная")
     (make-metro :name "Улица Дыбенко")
     (make-metro :name "Фрунзенская")
     (make-metro :name "Чёрная речка")
     (make-metro :name "Чернышевская")
     (make-metro :name "Чкаловская")
     (make-metro :name "Электросила")

     <<asm_deadline()>>

     (make-deadline :name "1 квартал 2015")
     (make-deadline :name "2 квартал 2015")
     (make-deadline :name "3 квартал 2015")
     (make-deadline :name "4 квартал 2015")

     (make-deadline :name "1 квартал 2016")
     (make-deadline :name "2 квартал 2016")
     (make-deadline :name "3 квартал 2016")
     (make-deadline :name "4 квартал 2016")

     (make-deadline :name "1 квартал 2017")
     (make-deadline :name "2 квартал 2017")
     (make-deadline :name "3 квартал 2017")
     (make-deadline :name "4 квартал 2017")

     (make-deadline :name "1 квартал 2018")
     (make-deadline :name "2 квартал 2018")
     (make-deadline :name "3 квартал 2018")
     (make-deadline :name "4 квартал 2018")

     (make-deadline :name "1 квартал 2019")
     (make-deadline :name "2 квартал 2019")
     (make-deadline :name "3 квартал 2019")
     (make-deadline :name "4 квартал 2019")

   #+END_SRC

*** Жилой комплекс

    #+NAME: asm_cmpx
    #+BEGIN_SRC emacs-lisp :var flds=cmpx_flds :exports none :session gen
      (gen-entity "cmpx" "комплекса" flds)
    #+END_SRC

*** Очередь жилого комплекса

    #+NAME: asm_plex
    #+BEGIN_SRC emacs-lisp :var flds=plex_flds :exports none :session gen
      (gen-entity "plex" "очереди жилого комплекса" flds)
    #+END_SRC

*** Корпус очереди жилого комплекса

    #+NAME: asm_crps
    #+BEGIN_SRC emacs-lisp :var flds=crps_flds :exports none :session gen
      (gen-entity "crps" "корпуса очереди жилого комплекса" flds)
    #+END_SRC

*** Планировка

    #+NAME: asm_flat
    #+BEGIN_SRC emacs-lisp :var flds=flat_flds :exports none :session gen
      (gen-entity "flat" "планировки" flds)
    #+END_SRC

*** Город

    #+NAME: asm_city
    #+BEGIN_SRC emacs-lisp :var flds=city_flds :exports none :session gen
      (gen-entity "city" "города" flds)
    #+END_SRC

*** Районы

    #+NAME: asm_district
    #+BEGIN_SRC emacs-lisp :var flds=district_flds :exports none :session gen
      (gen-entity "district" "района" flds)
    #+END_SRC

*** Метро

    #+NAME: asm_metro
    #+BEGIN_SRC emacs-lisp :var flds=metro_flds :exports none :session gen
      (gen-entity "metro" "метро" flds)
    #+END_SRC

*** Сроки сдачи

    #+NAME: asm_deadline
    #+BEGIN_SRC emacs-lisp :var flds=deadline_flds :exports none :session gen
      (gen-entity "deadline" "метро" flds)
    #+END_SRC

** Загрузчик данных из файлов

   Соберем загрузчик

   #+NAME: asm_loader
   #+BEGIN_SRC lisp :tangle src/mod/trend/loader.lisp :noweb tangle :exports code :padline no :comments link
   <<loader>>
   #+END_SRC
