#+HTML_HEAD: -*- fill-column: 92 -*-

#+TITLE: moto

#+NAME: css
#+BEGIN_HTML
<link rel="stylesheet" type="text/css" href="css/css.css" />
#+END_HTML

* Введение
  Создаем самый посещаемый ресурс по мототематике. Сначала в С-Пб, потом в Москве.

  Задачи:
  - Определить интересы целевой аудитории. Клубы, тусовки, небходимые сервисы
  - Определить круг зарубежных ресурсов, с которых брать идеи
  - Выйти на рекламодателей, определить возможную окупаемость и схемы монетизации

  Отличия от других:
  - Более демократичный ресурс чем мотобратан:
    - модератор подписывается под баном
    - можно баны обсуждать
    - сообщество может отменить бан модератора!
  - Больше возможностей:
    - поиск людей (ник, имя, район)
    - разделы общения:
    - по районам - для совместных прохватов (север, юг, пригороды)
    - кварталы по классу мотоциклов (спорбайки, эндуро, etc)
      - новости, которые сегментирутся по кварталам.
      - пользователь может подписаться на разные кварталы и сформировать ленту, а также на
        разных людей (иерархические теги)
    - прохваты - календарь
    - карта с маршрутами прохватов
    - статистика дтп как на motositizen
    - отметить темы как прочитанные
    - личные сообщения сделать удобнее чем на мотобратане и с поиском
  - Больше полезной информации о мотоциклах
    - раздел с мануалами и поиском по мотоциклу
    - раздел с поиском по запчастям
    - раздел с "у кого спросить" по мотоциклу
    - мотосервисы и отзывы о ремонтах
  - Никакой надоедливой рекламы (баннеров)
  - Разделы
    - УСЛУГИ - в этом разделе пользователь должен увидеть, где какие гаражи можно
      арендовать, в каких мастерских можно починиться, где есть мотошколы, где
      зарегистрироваться или застраховаться и пр - то есть здесь надо собрать инфу обо всех
      услугах, которые могут пригодиться.
    - ЗАПЧАСТИ - поиск запчастей как у частных так и по магазинам, отзывы с инфой где
      покупал эту запчасть https://www.louis.de/rubrik/motorradbekleidung-motorradhelme/1
    - ПРОХВАТЫ
    - БЛОГИ - сортировка новостей для удобства поиска (мало ли людям
      пригодится). Сортировать по источникам, например - СМИ (то есть газеты и проч
      известные сми), блоги, новости сайта.
    - УГОНЫ
    - ДТП
    - ГАЛЕРЕЯ - как у харлея или тут http://www.dorna.com/dornacontents_wsbk.html
    - Гонки
    - Отчеты о путешествиях
    - Брендованные страницы сервисов http://www.cobrausa.com/
      https://www.louis.de/katalog/themen-welten/meine-werkstatt
    - Статьи с кармой как на байкпосте
  - Трансляции с мотобратана, байкпоста и других сайтов, например ру_чп, в части мотоциклистов
  - Мотофлирт с функционалом полноценного сайта знакомств.
  - Комментарии ко всему
  - Продажа мотоциклов с функицоналом авто.ру и синдикацией с авто.ру и авито
  - Юридическая помощь
  - Отслеживание камер и радаров (за карму) (по карте)
  - Карма
    - отслеживать за что
    - привлекать людей к оценке сколько дать за какое действие
  - Связь с админами
  - Система исправления орфографических (и не только) ошибок сначала для себя, а при
    подтверждении автором - и для других. С наглядностью диффа.
  - Заметки по юзерам:
    http://vk.com/ekaterina.klochkova
    На всякий пожарный.
    Ближайшую неделю меня не будет вконтактике.
    У меня есть телефон: +79218857023
    и почта: kait.klochkova@gmail.com.
  - Поиск друзей с кем покататься
    Вводишь время, место и радиус, система находит друзей, и пишешь им - давай катать!
  - Мототур "по бабам"

* Стартап
  идея. жизнь на пракачку, или как из омеги заальфаться для задротов.
  приложение на мобилку, которое раздает тебе очки за то что ты делаешь что-то
  душеспасительное и полезное.
  связано с форсквэром, считывалкой штрихкодов и прочей поебней.

  ты логгишься туда и тебе рисуют аватарку тупого дрыща, нихуя не умеющего в этой жизни. у
  тебя 0 уровень.

  ты получаешь очки, когда отслеживалка находит тебя в фитнес-клубах, центрах обучения и
  т.д. если ты там появляешься регулярно - очки удваиваются, пока не поломаешь цепь
  регулярности. то есть 20 посещений качалки дают 20 очков, если ходить как поппало, или 40,
  если не ломать периодичность 2 раза в неделю.
  небольшое количество баллов получаешь, когда покупаешь полезную жратву или развивающие
  книги, гантели. спорт товары, оплачиваешь услуги обучения, медицинские услуги и проч. для
  этого используется сканер штрихкодоов

  растет уровень - растет необходимое количество баллов для достижения следующего.
  более ценные баллы можно получить, предоставляя приложению докозательства успехов -
  сертификаты об окончании курсов на курсере, сдача нормативов по бегу или прочей хуйне,
  которую отмеряет шагометр, встроенный в мобилку, чекины с других концов планеты.

  задроты - они задроты везде, и зарабатывая баллы будут прокачивать свою жизнь.

  идея для коммерциализации - заключать контракты с магазинами спорт товаров/ресторанами
  здорового питания/ центрами обучения, что бы при оплате их услуг получать бонусные баллы

  Одоната
  по пути побочные квестики - прочитай вот эту книжку, ответь на вопросики по содержанию,
  получи полюсик
  сходи в такой музейчик, отметься - держи еще один плюсик.
  на этой неделе пройдет вот такое мероприятие, сходи, получи супер бонус, а мы денег за
  рекламу от организаторов
  ага. ток что бы этим заняться мне надо либо с работы уволиться либо бросить спать.
  я чо эт хуйню то придумала. я узнада что мой клуб очки начисляет за посещения. и
  обнаружила, что как только об этом узнала. частота моих посещений возрасла до 3х раз в
  неделю. мне эти балы не дают нихуя. не даж так. НИХУЯШЕНЬКИ
  но воспитанное годами мышление задрота не позволяет упустить возможность заработать баллы

  есть проблема, связанная с тем, что человеки - в общем-то ленивые скоты. а задроты еще и
  хитрые ленивые скоты и нужна система контроля.

  поэтому эту хуйню надо строить изначально с привязкой к кому-нибудь.
  идеальный вариант - начать с физического состояния задрота, т.к. это самая болезненная тема
  раз, измеряется проще всего два.
  берем в одну руку сеть качалок - тот же задрипанный алекс фитнес и привязываем всю эту
  лабуду туда.
  менеджменту говорим, что ща продажи вырастут так, что охуеете а так же у вас будет мощная
  обратная связь с клиентурой.
  чувак не только чекинится в зале, но так же имеет возможность раз в месяц подойти к тренеру
  и сказать "смари как я умею". тренер проверяет прогресс и говорит - молодца чувак. после
  чего на своей мобилке жамкает кнопулю, которая генерит qr-код. чувак считывает своей
  мобилой qr-код и переходит на след уровень.
  можно привязать персональные тренировки к этой лабуде. тренра жеж все равно дают роуд мап
  какй-то мол по понедельникам ты делаешь два притопа три прихлопа, во вторник дрочишь хуй, в
  четверг работаешь вот с такими мышцами вот такими упражнениями по столько подходов. для
  чувака который первый раз пришел в зал все это - китайская грамота и вылетает из ушей
  моментально (я вот в полном ахуе например была) - а тут тренер говорит, мол выполняешь
  программу с номером 15, вот те код - чувак его считывает мобилкой и имеет нормальное
  рассписание что и когда ему делать. и задно баллы получает.

  делает это вместе с тренером - получает от тренера код, баллы удваиваются, в зале растут
  продажи персональных тренировок.

  через нное количество времени получаем сеть посетителей сети клубов, которые радостно друг
  другу шлют фотаньки с бицухами и дают оценки тренерам (как бонус)

  и тогда топаем в сеть школ, ну например иностранных языков. та же лабуда. получаешь баллы
  за то что приходишь на уроки, после экзамена и перехода на новый уровень владения языком
  получаешь от препода код. + мильен баллов и бэйджик.
  школам говорим - ща к вам прибежит клиентура в 100500 чуваков из качалок.
  потом туда же постепенно добавляем другие напрваления. автошколы, университеты, курсы
  повышения квалификации, оздоровительные программы и проч.

  от всех организаций-участников получаем обратную связь по поводу того, как чувачки наши
  развиваются. каждый новый участник получает прирост клиентуры и охуенную рекламную
  площадку. участники игрули получают скидку на услугу компаний-участников. мы сидим и
  стрижем купоны. вин-вин

  так как все участники реальны и действительно ходят во все эти хуйни, то мы будем
  единственной площадкой, которая может доказать, что отзывы, складирующиеся у нас (а люди
  ж те же голуби, им везде срать надо своим мнением) на 100% реальны, а не написаны
  пиарщиками или роботами

  соответственно к нам начинают прибегать посторонние люди что бы получать объективную оченку
  мест в которые они хотят вписаться

* Что улучшать
  - Типы для полей state нужно задавать как перечисления
  - Добавить AJAX и Comet
  - Автоматизированная генерация интерфейса для просмотра и редактирования сущностей
  - Забираем пользователей с других ресурсов
  - Очищалка базы для каждого модуля должна лежать в модуле
  - И сущности тоже туда переложить
* Определения сущностей

  Соберем все сущности и автоматы

  #+NAME: entity_and_automates
  #+BEGIN_SRC lisp :tangle src/entityes.lisp :noweb tangle :exports code :padline no :comments link
    (in-package #:moto)

    <<entity_and_automates_contents>>
  #+END_SRC

** Функции для кодогенерации сущностей

   Эти функции будут кодогенерировать сущности и автоматы из таблиц с наименованием и
   типами полей внутри этого файла.

   Чтобы емакс не запрашивал подтверждение на каждое исполнение кода, установим эту
   настройку:

   #+NAME: gen_org_confirm
   #+BEGIN_SRC emacs-lisp
     ;; Do not prompt to confirm evaluation
     ;; This may be dangerous - make sure you understand the consequences
     ;; of setting this -- see the docstring for details
     (setq org-confirm-babel-evaluate nil)
   #+END_SRC

   Начнем с генерации кода из таблицы полей:

   #+NAME: gen_fields
   #+BEGIN_SRC emacs-lisp
     (defun gen-fields (rows)
       (princ (format "(%s\n" (butlast (car rows))))
       (mapcar #'(lambda (x)
                   (princ (format " %s\n" (butlast x))))
               (butlast (cdr rows)))
       (princ (format " %s)" (butlast (car (last rows))))))
   #+END_SRC

   Теперь напишем код, который генерирует код для состояний конечного автомата:

   #+NAME: gen_states
   #+BEGIN_SRC emacs-lisp
     (defun gen-states (rows)
       (let ((hash (make-hash-table :test #'equal))
             (states))
         (dolist (elt rows nil)
           (puthash (cadr elt) nil hash)
           (puthash (cadr (cdr elt))  nil hash))
         (maphash (lambda (k v)
                    (push k states))
                  hash)
         (princ "(")
         (dolist (elt (butlast states))
           (princ (format ":%s " elt)))
         (princ (format ":%s)" (car (last states))))))
   #+END_SRC

   И добавим к этом генератор действий - т.е. переходов между состояниями:

   #+NAME: gen_actions
   #+BEGIN_SRC emacs-lisp
     (defun gen-actions (rows)
       (let ((x (car rows)))
         (princ (format "((:%s :%s :%s)" (cadr x) (cadr (cdr x)) (car x))))
       (if (equal 1 (length rows))
           (princ ")\n")
         (progn
           (princ "\n")
           (mapcar #'(lambda (x)
                       (princ (format " (:%s :%s :%s)\n" (cadr x) (cadr (cdr x)) (car x))))
                   (cdr (butlast rows)))
           (let ((x (car (last rows))))
             (princ (format " (:%s :%s :%s))" (cadr x) (cadr (cdr x)) (car x)))))))
   #+END_SRC

   Соберем все это в один файл:

   #+NAME: generators
   #+BEGIN_SRC emacs-lisp :tangle generators.el :noweb tangle :exports code :padline no :comments link
     <<gen_org_confirm>>

     <<gen_fields>>

     <<gen_states>>

     <<gen_actions>>
   #+END_SRC

   И загрузим его:
   #+NAME: generators
   #+BEGIN_SRC emacs-lisp
     (load-file "generators.el")
   #+END_SRC

** Пользователи (user)

   Для начала надо определиться, какие данные мы собираемся хранить о пользователях, и
   какого типа будут эти данные. Типы данных задаем в формате [[http://marijnhaverbeke.nl/postmodern/postmodern.html][Postmodern]] чтобы потом
   сохранить данные в =PostgreSQL=

   #+CAPTION: Данные пользователя
   #+NAME: user_data
     | field name | field type           | note                          |
     |------------+----------------------+-------------------------------|
     | id         | serial               | идентификатор                 |
     | name       | varchar              | имя пользователя              |
     | password   | varchar              | пароль                        |
     | email      | varchar              | емейл                         |
     | ts-create  | bigint               | время создания                |
     | ts-last    | bigint               | время когда был последний раз |
     | role-id    | (or db-null integer) | идентификатор роли            |

   В нашей системе пользователь может существовать (или не существовать) в одном их
   нескольких состояний:
    + Когда пользователь еще не зарегистрирован на сайте мы можем считать его
      незарегистрированным (=unregistred=)
    + После регистрации он автоматически становится залогиненным (=logged=)
    + Пользователь может покинуть сайт и перейти в состояние =unlogged=
    + Пользователь может забыть свой пароль, тогда мы должны выслать ему ссылку для
      восстановления пароля (=sended=)
    + И наконец, после восстановления пароля пользователь вновь становится залогиненным
      (=logged=)

   Все эти переходы и состояния сведем в единую таблицу:

   #+CAPTION: Состояния конечного автомата пользователя
   #+NAME: user_state
     | action         | from        | to          |
     |----------------+-------------+-------------|
     | registration   | unregistred | logged      |
     | unregistration | logged      | unregistred |
     | enter          | unlogged    | logged      |
     | leave          | logged      | unlogged    |
     | forgot         | unlogged    | sended      |
     | remember       | sended      | logged      |

   Теперь мы можем полностью описать поведение пользователя как конечный автомат:

   #+NAME: user_state_graph
   #+BEGIN_SRC emacs-lisp :var table=user_state :results output :exports none
     (mapcar #'(lambda (x)
                 (princ (format "%s -> %s [label =\"%s\"];\n"
                                (second x) (third x) (first x))))
             (nthcdr 2 table))
   #+END_SRC

   #+BEGIN_SRC dot :file img/user-state.png :var input=user_state_graph :exports results
     digraph G {
       rankdir = LR;
       $input
     }
   #+END_SRC

   Сводя вместе, все что нам известно о пользователе (его поведение и поля) опишем все это
   в коде:

   #+NAME: entity_and_automates_contents
   #+BEGIN_SRC lisp

     (define-automat user "Автомат пользователя"
       <<user_fields()>>
       <<user_states()>>
       <<user_actions()>>)

      <<user_actions_func>>

      <<create_user>>
   #+END_SRC

   Где =user-fields= (поля данных) определим как:

   #+NAME: user_fields
   #+BEGIN_SRC emacs-lisp :var table=user_data :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

   А =user-states= т.е. состояния пользователя определим так:

   #+NAME: user_states
   #+BEGIN_SRC emacs-lisp :var table=user_state :results output :exports results :tangle no
     (gen-states table)
   #+END_SRC

   И, наконец, определим =user-actions= переходы между состояниями:

   #+NAME: user_actions
   #+BEGIN_SRC emacs-lisp :var table=user_state :results output :exports results :tangle no
     (gen-actions table)
   #+END_SRC

   Теперь определим функции, которые вызываются на переходах

   #+NAME: user_actions_func
   #+BEGIN_SRC lisp
     (defun registration ()
       "unregistred -> logged"
       )

     (defun unregistration ()
       "logged -> unregistred"
       )

     (defun enter ()
       "unlogged -> logged"
       )

     (defun leave ()
       "logged -> unlogged"
       )

     (defun forgot ()
       "unlogged -> sended"
       )

     (defun remember ()
       "sended -> logged"
       )
   #+END_SRC

** Очереди (que, quelt)

   Очереди используются для фолловинга и прочей подписки на обновления.

   Нам нужна некоторая инфраструктура чтобы абстрагироваться от операций управления
   очередями, подписчиками и посылки сообщений. Потом ее можно будет изменить для поддержки
   RabbitMQ, Mbus или ZMQ или даже использовать все их одновременно для разных целей.

   Очередь является простой сущностью и не имеет состояния.

   #+CAPTION: Данные очереди
   #+NAME: que_data
     | field name | field type | note          |
     |------------+------------+---------------|
     | id         | serial     | идентификатор |
     | name       | varchar    | имя очереди   |

   #+NAME: entity_and_automates_contents
   #+BEGIN_SRC lisp

     (define-entity que "Сущность очереди"
       <<que_fields()>>)

     (make-que-table)

     <<que_contents>>
   #+END_SRC

   Где =que-fields= (поля данных) определим как:

   #+NAME: que_fields
   #+BEGIN_SRC emacs-lisp :var table=que_data :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

   #+CAPTION: Данные пользователя
   #+NAME: user_data2
     | field name | field type           | note                          |
     |------------+----------------------+-------------------------------|
     | id         | serial               | идентификатор                 |
     | name       | varchar              | имя пользователя              |
     | password   | varchar              | пароль                        |
     | email      | varchar              | емейл                         |
     | ts-create  | bigint               | время создания                |
     | ts-last    | bigint               | время когда был последний раз |
     | role-id    | (or db-null integer) | идентификатор роли            |


   #+NAME: user_fields
   #+BEGIN_SRC emacs-lisp :var table=user_data2 :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

   #+results: user_fields
   : ((id serial)
   :  (name varchar)
   :  (password varchar)
   :  (email varchar)
   :  (ts-create bigint)
   :  (ts-last bigint)
   :  (role-id (or db-null integer)))




   Нам понадобится сущность элемента очереди, назовем его =quelt=. Элемент очереди является
   простой сущностью и не имеет состояния.

   #+CAPTION: Данные элемента очереди
   #+NAME: quelt_data
     | field name | field type | note                  |
     |------------+------------+-----------------------|
     | id         | serial     | идентификатор         |
     | que-id     | integer    | идентификатор очереди |
     | text       | varchar    | содержимое            |

   #+NAME: entity_and_automates_contents
   #+BEGIN_SRC lisp

     (define-entity quelt "Сущность элемента очереди"
       <<quelt_fields()>>)

     (make-quelt-table)

     <<quelt_contents>>
   #+END_SRC

   Где =quelt-fields= (поля данных) определим как:

   #+NAME: quelt_fields
   #+BEGIN_SRC emacs-lisp :var table=quelt_data :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

   Создадим необходимые очереди:

   #+NAME: que_contents
   #+BEGIN_SRC lisp
     ;; (make-que :name "admin")
     ;; (make-que :name "manager")
     ;; (make-que :name "moderator")
     ;; (make-que :name "robot")
   #+END_SRC

** Роли (role)

   Роли определяют набор сценариев, которые пользователь выполняет на сайте. Функционал,
   который выполняет сценарии запрашивает разрешение на выполнение действий, которое
   опирается на роль, присвоенную пользователю. Пользователь может иметь только одну роль
   или не иметь ее вовсе.

   Роль является простой сущностью и не имеет состояния.

   #+CAPTION: Данные роли
   #+NAME: role_data
     | field name | field type | note          |
     |------------+------------+---------------|
     | id         | serial     | идентификатор |
     | name       | varchar    | имя роли      |

   #+NAME: entity_and_automates_contents
   #+BEGIN_SRC lisp

     (define-entity role "Сущность роли"
       <<role_fields()>>)

     (make-role-table)

     <<create_roles>>
   #+END_SRC

   Где =role-fields= (поля данных) определим как:

   #+NAME: role_fields
   #+BEGIN_SRC emacs-lisp :var table=role_data :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

   Создадим необходимые роли:

   #+NAME: create_roles
   #+BEGIN_SRC lisp
     (make-role :name "admin")
     (make-role :name "manager")
     (make-role :name "moderator")
     (make-role :name "robot")
   #+END_SRC

** Группы (group)

   Группы пользователей определяют набор операций, которые пользователь может выполнять над
   объектами системы. В отличие от ролей, один пользователь может входить в несколько групп
   или не входить ни в одну из них.

   Роль является простой сущностью и не имеет состояния.

   #+CAPTION: Данные роли
   #+NAME: group_data
     | field name | field type | note          |
     |------------+------------+---------------|
     | id         | serial     | идентификатор |
     | name       | varchar    | имя группы    |

   #+NAME: entity_and_automates_contents
   #+BEGIN_SRC lisp

     (define-entity group "Сущность группы"
       <<group_fields()>>)

     (make-group-table)

     <<create_groups>>

     <<user2group_entity>>
   #+END_SRC

   Где =group-fields= (поля данных) определим как:

   #+NAME: group_fields
   #+BEGIN_SRC emacs-lisp :var table=group_data :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

   Создадим необходимые роли:

   #+NAME: create_groups
   #+BEGIN_SRC lisp
     (make-group :name "oldman")
     (make-group :name "newboy")
     (make-group :name "veteran")
     (make-group :name "traveler")
     (make-group :name "dirtyman")
   #+END_SRC

   Теперь создадим таблицу связи, которая свяжет пользователей и группы:

   #+CAPTION: Данные таблицы связи пользователя и группы
   #+NAME: user2group_data
     | field name | field type | note                       |
     |------------+------------+----------------------------|
     | id         | serial     | идентификатор              |
     | user-id    | integer    | идентификатор пользователя |
     | group-id   | integer    | идентификатор группы       |

   #+NAME: user2group_entity
   #+BEGIN_SRC lisp
     (define-entity user2group "Сущность связи пользователя и группы"
       <<user2group_fields()>>)

     (make-user2group-table)
   #+END_SRC

   Где =user2group-fields= (поля данных) определим как:

   #+NAME: user2group_fields
   #+BEGIN_SRC emacs-lisp :var table=user2group_data :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

** Сообщения (msg)

   О сообщениях мы знаем только от кого они посылаются, кому и собственно текст
   сообщения. Его наверно не стоит ограничивать. По идее как посылающий, так и принимающий
   может удалить сообщение (пометить как удаленное), для этого мы используем отдельные
   флаги.

   #+CAPTION: Данные сообщения
   #+NAME: msg_data
     | field name  | field type | note                                     |
     |-------------+------------+------------------------------------------|
     | id          | serial     | идентификатор                            |
     | snd-id      | integer    | пользователь, который послал сообщение   |
     | rcv-id      | integer    | пользователь, который получает сообщение |
     | msg         | varchar    | сообщение                                |
     | ts-create   | bigint     | время создания                           |
     | ts-delivery | bigint     | время доставки                           |

   Еще сообщение может быть доставлено или недоставлено.

   #+CAPTION: Состояния конечного автомата пользователя
   #+NAME: msg_state
     | action   | from        | to        |
     |----------+-------------+-----------|
     | delivery | undelivered | delivered |

   Сводя вместе, все что нам известно о сообщении (его поведение и поля) опишем все это в
   коде:

   #+NAME: entity_and_automates_contents
   #+BEGIN_SRC lisp

     (define-automat msg "Автомат сообщения"
       <<msg_fields()>>
       <<msg_states()>>
       <<msg_actions()>>)

      <<msg_actions_func>>
   #+END_SRC

   Где =msg-fields= (поля данных) определим как:

   #+NAME: msg_fields
   #+BEGIN_SRC emacs-lisp :var table=msg_data :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

   А =msg-states= т.е. состояния пользователя определим так:

   #+NAME: msg_states
   #+BEGIN_SRC emacs-lisp :var table=msg_state :results output :exports results :tangle no
     (gen-states table)
   #+END_SRC

   И, наконец, определим =msg-actions= переходы между состояниями:

   #+NAME: msg_actions
   #+BEGIN_SRC emacs-lisp :var table=msg_state :results output :exports results :tangle no
     (gen-actions table)
   #+END_SRC

   Теперь определим функции, которые вызываются на переходах

   #+NAME: msg_actions_func
   #+BEGIN_SRC lisp
     (defun delivery ()
       "undelivered -> delivered"
       )
   #+END_SRC

** Аватары (avatar)

   Пользователи имеют неопределенное кол-во аватарок, разного размера, для которых мы
   осуществляем хранение в оригинальном размере, масштабирование и хранение
   отмасштабированных превьюшек.

   #+CAPTION: Данные аватарки
   #+NAME: avatar_data
     | field name | field type | note                               |
     |------------+------------+------------------------------------|
     | id         | serial     | идентификатор                      |
     | user-id    | integer    | идентификатор пользователя         |
     | name       | varchar    | имя пользователя                   |
     | origin     | varchar    | путь к файлу оригинального размера |
     | ts-create  | bigint     | время создания                     |

   Одна из автарок может быть активной в данный момент.

   #+CAPTION: Состояния конечного автомата пользователя
   #+NAME: avatar_state
     | action     | from     | to       |
     |------------+----------+----------|
     | avatar-off | active   | inactive |
     | avatar-on  | inactive | active   |

   Сводя вместе, все что нам известно о аватаре (его поведение и поля) опишем все это
   в коде:

   #+NAME: entity_and_automates_contents
   #+BEGIN_SRC lisp

     (define-automat avatar "Автомат аватара"
       <<avatar_fields()>>
       <<avatar_states()>>
       <<avatar_actions()>>)

      <<avatar_actions_func>>

      <<create_avatar>>
   #+END_SRC

   Где =avatar-fields= (поля данных) определим как:

   #+NAME: avatar_fields
   #+BEGIN_SRC emacs-lisp :var table=avatar_data :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

   А =avatar-states= т.е. состояния пользователя определим так:

   #+NAME: avatar_states
   #+BEGIN_SRC emacs-lisp :var table=avatar_state :results output :exports results :tangle no
     (gen-states table)
   #+END_SRC

   И, наконец, определим =avatar-actions= переходы между состояниями:

   #+NAME: avatar_actions
   #+BEGIN_SRC emacs-lisp :var table=avatar_state :results output :exports results :tangle no
     (gen-actions table)
   #+END_SRC

   Теперь определим функции, которые вызываются на переходах

   #+NAME: avatar_actions_func
   #+BEGIN_SRC lisp
     (defun avatar-off ()
       "active -> inactive"
       )

     (defun avatar-on ()
       "inactive -> active"
       )
   #+END_SRC

** Мотоциклы (moto)

   Здесь все, что относится к мотоциклам пользователей. Мы хотим, чтобы пользователи не
   только могли рассказать о своих мотоциклах, но и купить/продать их, убедившись в
   легальности и нескрученном пробеге, изучив историю и динамику цен.

   В начале и конце сезона можно организовывать акции по контролю пробега например, за
   которые начислять карму.

   Для начала, стандартные поля - марка, модель, цвет и год выпуска.

   У каждого мотоцикла также есть цена за которую владелец готов его продать.

   Поля, которые пользователь может заполнить по желанию - описание мотоцикла, описание
   тюнинга.

   Поля, которые не показываются всем подряд: номерной знак, номер рамы, номер двигателя -
   все это может пригодиться для проверки мотоцикла на легальность.

   #+CAPTION: Данные мотоцикла
   #+NAME: moto_data
     | field name | field type           | note                             |
     |------------+----------------------+----------------------------------|
     | id         | serial               | идентификатор                    |
     | vendor-id  | (or db-null integer) | идентификтор фирмы-производителя |
     | model-id   | (or db-null integer) | идентификтор модели              |
     | color-id   | (or db-null integer) | идентификтор цвета               |
     | year       | (or db-null integer) | год выпуска                      |
     | price      | (or db-null integer) | цена                             |
     | plate      | (or db-null varchar) | номерной знак                    |
     | vin        | (or db-null varchar) | vin-номер                        |
     | frame-num  | (or db-null varchar) | номер рамы                       |
     | engine-num | (or db-null varchar) | номер двигателя                  |
     | pts-data   | (or db-null varchar) | данные птс (раскрыть)            |
     | desc       | (or db-null varchar) | описание мотоцикла               |
     | tuning     | (or db-null varchar) | описание тюнинга                 |

   В нашей системе мотоцикл может существовать (или не существовать) в одном их
   нескольких состояний:
    + =используется= Мотоцикл на ходу, может быть выставлен на продажу, разбит, сломан или угнан.
    + =продается= Мотоцикл может быть продан. В этом состоянии мотоцикл находится в
      поиске. Хозяин может отменить продажу мотоцикла, если его слишком достали звонками,
      например. Хозяин может осуществить продажу, в этом случае, мотоцикл переходит в
      состояние =продан=.
    + =продан=. Продавец ставит этот статус, расставаясь с мотоциклом.
    + =куплен=. Покупатель ставит этот статус, получая мотоцикл
    + =сломан= Поломан настолько, что поломка препятствует эксплуатации. Отсюда есть только
      путь в сервис или на разборку. Конечно ломаный мотоцикл могут еще украсть или
      продать, но мы не продаем ломаные мотоциклы, это уже в раздел запчастей.
    + =угнан= Украден (в угоне). Дальше в дневнике может быть только где его видели. Может
      быть возвращен владельцу, а также сломан или разбит ворами.
    + =чинится= (в сервисе - эксплуатация невозможна). Этот статус устанавливает
      =service-man= при получени мотоцикла. При переводе мотоцикла обратно в эксплуатацию
      по идее должен занести в дневник список выполненных работ и сумму оплаты. Однако
      иногда починить мотоцикл не удается, тогда он остается сломанным, однако в сервисной
      книжке появляется запись о попытке починить. Иногда в процессе ремонта оказывается,
      что дешевле объявить мотоцикл хламом, чем чинить.
    + =хлам= Разбит (и восстановлению не подлежит)

   Все эти состояния и переходы между ними сведем в единую таблицу:

   #+CAPTION: Состояния конечного автомата мотоцикла
   #+NAME: moto_state
     | action                        | from         | to           |
     |-------------------------------+--------------+--------------|
     | выставление.на.продажу        | используется | продается    |
     | сломался                      | используется | сломан       |
     | крэш                          | используется | хлам         |
     | угон                          | используется | угнан        |
     | воры.повредили                | угнан        | сломан       |
     | воры.разбили                  | угнан        | хлам         |
     | отмена.выставления.на.продажу | продается    | используется |
     | отвоз.в.ремонт                | сломан       | чинится      |
     | доломал                       | сломан       | хлам         |
     | неосилил.починить             | чинится      | сломан       |
     | починил                       | чинится      | используется |
     | здесь.не.починишь             | чинится      | хлам         |
     | продажа                       | продается    | продан       |
     | покупка                       | продан       | куплен       |
     | ввод.в.эксплуатацию           | куплен       | используется |
     | возврат.с.угона               | угнан        | используется |

   Теперь мы можем полностью описать поведение пользователя как конечный автомат:

   #+NAME: moto_state_graph
   #+BEGIN_SRC emacs-lisp :var table=moto_state :results output :exports none
     (mapcar #'(lambda (x)
                 (princ (format "%s -> %s [label =\"%s\"];\n"
                                (second x) (third x) (first x))))
             (nthcdr 2 table))
   #+END_SRC

   #+BEGIN_SRC dot :file img/moto-state.png :var input=moto_state_graph :exports results
     digraph G {
       rankdir = LR;
       $input
     }
   #+END_SRC

   Сводя вместе, все что нам известно о пользователе (его поведение и поля) опишем все это
   в коде:

   #+NAME: entity_and_automates_contents
   #+BEGIN_SRC lisp

     (define-automat moto "Автомат мотоцикла"
       <<moto_fields()>>
       <<moto_states()>>
       <<moto_actions()>>)

      <<moto_actions_func>>

      <<create_moto>>
   #+END_SRC

   Где =moto-fields= (поля данных) определим как:

   #+NAME: moto_fields
   #+BEGIN_SRC emacs-lisp :var table=moto_data :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

   А =moto-states= т.е. состояния пользователя определим так:

   #+NAME: moto_states
   #+BEGIN_SRC emacs-lisp :var table=moto_state :results output :exports results :tangle no
     (gen-states table)
   #+END_SRC

   И, наконец, определим =moto-actions= переходы между состояниями:

   #+NAME: moto_actions
   #+BEGIN_SRC emacs-lisp :var table=moto_state :results output :exports results :tangle no
     (gen-actions table)
   #+END_SRC

   Теперь определим функции, которые вызываются на переходах

   #+NAME: moto_actions_func
   #+BEGIN_SRC lisp
     (defun |выставление.на.продажу| ()
       "используется -> продается")
     (defun |сломался| ()
       "используется -> сломан")
     (defun |крэш| ()
       "используется -> хлам")
     (defun |угон| ()
       "используется -> угнан")
     (defun |воры.повредили| ()
       "угнан -> сломан")
     (defun |воры.разьебали| ()
       "угнан -> хлам")
     (defun |отмена.выставления.на.продажу| ()
       "продается -> используется")
     (defun |отвоз.в.ремонт| ()
       "сломан -> чинится")
     (defun |доломал| ()
       "сломан -> хлам")
     (defun |неосилил.починить| ()
       "чинится -> сломан")
     (defun |починил| ()
       "чинится -> используется")
     (defun |здесь.не.починишь| ()
       "чинится -> хлам")
     (defun |продажа| ()
       "продается -> продан")
     (defun |покупка| ()
       "продан -> куплен")
     (defun |ввод.в.эксплуатацию| ()
       "куплен -> используется")
     (defun |возврат.с.угона| ()
       "угнан -> используется")
   #+END_SRC

   Не забываем про аватар, который показывается на страничке пользователя и про набор фоток
   этого мотоцикла, доступный через таблицу связи =moto2motophoto=. Аватаром является фотка
   мотоцикла, со статусом =active=.

   Поскольку у мотоцикла может быть несколько владельцев, и один пользователь может владеть
   несколькими мотоциклами, то мы связываем мотоцикл и его владельца через таблицу связи с
   диапазоном дат - =moto2user=, при этом, если даты пересекаются - то два пользователя,
   очевидно, владеют мотоциклами вместе. Таким образом мы можем отследить историю
   мотоцикла, с момента его появления, до разборки. Учитывая планируемую "технологическую
   репутацию" пользователей это поможет сделать вывод о том, как с мотоциклом обращались.

   Дневник мотоцикла. Что случалось с мотоциклом - поломки, участие в прохватах,
   поездках-путешествиях, ремонт в сервисах - все это привязывается из =motodiary=. Это
   позволяет еще и отслеживать траты на мотоцикл.

   Также у каждого мотоцикла есть wish-list - то, что хозяин хотел бы приобрести для
   него. Мы храним это в таблице =motowish=, которая содержит ссылку на мотоцикл и его
   владельца, а также на товар, если он существует в базе товаров.

   #+NAME: moto_actions_func
   #+BEGIN_SRC lisp
     (in-package #:moto)

     ;; (loop :for item :in (with-connection *db-spec*
     ;;                        (query
     ;;                         (:limit
     ;;                          (:select 'motos
     ;;                                   :from 'bratan
     ;;                                   :where (:not (:like "" 'motos)))
     ;;                                  999999999999))) :do
     ;;    (format t "~%~A"
     ;;             (ppcre:split "\\s+" (car item))))
   #+END_SRC

** Цвет (color)


   Цвета мотоциклов - простая сущность и не имеет состояния.

   #+CAPTION: Данные цвета
   #+NAME: color_data
     | field name | field type | note          |
     |------------+------------+---------------|
     | id         | serial     | идентификатор |
     | name       | varchar    | имя цвета     |

   #+NAME: entity_and_automates_contents
   #+BEGIN_SRC lisp

     (define-entity color "Сущность цвета"
       <<color_fields()>>)

     (make-color-table)
   #+END_SRC

   Где =color-fields= (поля данных) определим как:

   #+NAME: color_fields
   #+BEGIN_SRC emacs-lisp :var table=color_data :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

** Производитель (vendor)

   Цвета мотоциклов - простая сущность и не имеет состояния.

   #+CAPTION: Данные производителя
   #+NAME: vendor_data
     | field name | field type | note              |
     |------------+------------+-------------------|
     | id         | serial     | идентификатор     |
     | name       | varchar    | имя производителя |

   #+NAME: entity_and_automates_contents
   #+BEGIN_SRC lisp

     (define-entity vendor "Сущность производителя"
       <<vendor_fields()>>)

     (make-vendor-table)
   #+END_SRC

   Где =vendor-fields= (поля данных) определим как:

   #+NAME: vendor_fields
   #+BEGIN_SRC emacs-lisp :var table=vendor_data :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

** Братан (bratan)

   Наш пользователь может быть зарегистрирован на http://motobratan.ru

   Чтобы предоставлять ему разнообразные сервисы, отсутстующие на на мотобратане, мы
   отражаем профили пользователя мотобратана у себя. Наш пользователь может связать свой
   профиль с профилем на мотобратане.

   Братан является простой сущностью и не имеет состояния.

   #+CAPTION: Данные роли
   #+NAME: bratan_data
     | field name  | field type           | note                               |
     |-------------+----------------------+------------------------------------|
     | id          | serial               | идентификатор                      |
     | bratan-id   | (or db-null integer) | идентификтор на мотобратане        |
     | ts-last-upd | (or db-null bigint)  | время последнего обновления данных |
     | name        | varchar              | имя                                |
     | fio         | (or db-null varchar) | ФИО                                |
     | last-seen   | (or db-null varchar) | последнее посещение мотобратана    |
     | addr        | (or db-null varchar) | район и город                      |
     | ts_reg      | (or db-null varchar) | время регистрации                  |
     | age         | (or db-null varchar) | возраст                            |
     | birthday    | (or db-null varchar) | день рождения                      |
     | blood       | (or db-null varchar) | группа крови                       |
     | moto-exp    | (or db-null varchar) | стаж мотовождения                  |
     | phone       | (or db-null varchar) | телефон                            |
     | activityes  | (or db-null varchar) | активность                         |
     | interests   | (or db-null varchar) | интересы                           |
     | photos      | (or db-null varchar) | фотографии                         |
     | avatar      | (or db-null varchar) | аватар                             |
     | motos       | (or db-null varchar) | мотоциклы                          |

   #+NAME: entity_and_automates_contents
   #+BEGIN_SRC lisp

     (define-entity bratan "Сущность братана"
       <<bratan_fields()>>)

     (make-bratan-table)
   #+END_SRC

   Где =bratan-fields= (поля данных) определим как:

   #+NAME: bratan_fields
   #+BEGIN_SRC emacs-lisp :var table=bratan_data :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

* События

  Мы используем события, чтобы отслеживать и логгировать изменения в системе, которые
  происходят в ответ на действия внешних сил.

   #+NAME: events
   #+BEGIN_SRC lisp :tangle src/events.lisp :noweb tangle :exports code :padline no :comments link
     ;;;; events.lisp

     (in-package #:moto)

   #+END_SRC

* Interface

  Соберем веб-интерфейс:

  #+NAME: iface
  #+BEGIN_SRC lisp :tangle src/iface.lisp :noweb tangle :exports code :padline no :comments link
    ;;;; iface.lisp

    (in-package #:moto)

    ;; Враппер веб-интерфейса
    <<with_wrapper>>

    ;; Хелпер форм
    <<frm>>

    <<iface_contents>>
  #+END_SRC

** Главная страница

   #+NAME: iface_contents
   #+BEGIN_SRC lisp
     (in-package #:moto)

     (restas:define-route main ("/")
       (with-wrapper
         "main"))
   #+END_SRC

** Список пользователей

   #+NAME: iface_contents
   #+BEGIN_SRC lisp
     (in-package #:moto)

     (restas:define-route allusers ("/users")
       (with-wrapper
         (tbl
          (with-collection (i (all-user))
            (tr
             (td (format nil "<a href=\"/user/~A\">~A</a>" (id i) (id i)))
             (td (name i))
             (td (password i))
             (td (email i))))
          :border 1)))

     (restas:define-route allusers-ctrl ("/users" :method :post)
       (with-wrapper
         (let* ((p (alist-to-plist (hunchentoot:post-parameters*))))
           "TODO")))
   #+END_SRC

** Страничка пользователя

   #+NAME: iface_contents
   #+BEGIN_SRC lisp
     (in-package #:moto)

     (restas:define-route user ("/user/:userid")
       (with-wrapper
         (let* ((i (parse-integer userid))
                (u (get-user i)))
           (if (null u)
               "Нет такого пользователя"
               (format nil "~{~A~}"
                       (list
                        (format nil "<h1>Страница пользователя ~A</h1>" (id u))
                        (format nil "<h2>Данные пользователя ~A</h2>" (name u))
                        (tbl
                         (with-element (u u)
                           (row "Имя пользователя" (name u))
                           (row "Пароль" (password u))
                           (row "Email" (email u)))
                         :border 1)
                        ))))))

     (restas:define-route user-ctrl ("/user/:userid" :method :post)
       (with-wrapper
         (let* ((p (alist-to-plist (hunchentoot:post-parameters*))))
           (cond ((getf p :addsum)   )
                 ((getf p :follow)   )
                 ((getf p :neworder) )))))
   #+END_SRC

* Модули
** Cущности, автоматы и их тесты

   Опишем из чего состоит модуль, это описание станет частью asd-файла:

   #+NAME: mod_entity
   #+BEGIN_SRC lisp
     (:module "entity"
              :serial t
              :pathname "mod"
              :components ((:file "entity")))
   #+END_SRC

   Собственно описание модуля вынесено в файл [[file:entity.org]]

** Авторизация

   Опишем из чего состоит модуль, это описание станет частью asd-файла:

   #+NAME: mod_auth
   #+BEGIN_SRC lisp
     (:module "auth"
              :serial t
              :pathname "mod/auth"
              :components ((:static-file "auth-tpl.htm")
                           (:file "auth")))
   #+END_SRC

   Как пользователь, я хочу иметь возможность ввести логин и пароль чтобы получить доступ к
   закрытому от неавторизованных пользователей функционалу.

   Собственно описание модуля вынесено в файл [[file:auth.org]]

** Очереди
   Опишем из чего состоит модуль, это описание станет частью asd-файла:

   #+NAME: mod_que
   #+BEGIN_SRC lisp
     (:module "que"
              :serial t
              :pathname "mod/que"
              :components ((:file "que")))
   #+END_SRC

   Как пользователь, я хочу иметь возможность ввести логин и пароль чтобы получить доступ к
   закрытому от неавторизованных пользователей функционалу.

   Собственно описание модуля вынесено в файл [[file:que.org]]

** Сообщения

   Опишем из чего состоит модуль, это описание станет частью asd-файла:

   #+NAME: mod_msg
   #+BEGIN_SRC lisp
     (:module "msg"
              :serial t
              :pathname "mod/msg"
              :components ((:static-file "msg-tpl.htm")
                           (:file "msg-prepare")
                           (:file "msg")))
   #+END_SRC

   Собственно описание модуля вынесено в файл [[file:msg.org]]

** Trend

   Опишем из чего состоит модуль, это описание станет частью asd-файла:

   #+NAME: mod_trend
   #+BEGIN_SRC lisp
     (:module "trend"
              :serial t
              :pathname "mod/trend"
              :components ((:static-file "trend-tpl.htm")
                           (:file "trend-prepare")
                           (:file "entityes")
                           (:file "trend")))
   #+END_SRC

   Собственно описание модуля вынесено в файл [[file:trend.org]]

** Граббер пользователей мотобратана

   Опишем из чего состоит модуль, это описание станет частью asd-файла:

   #+NAME: mod_bratan
   #+BEGIN_SRC lisp
     (:module "bratan"
              :serial t
              :pathname "mod/bratan"
              :components ((:file "bratan")))
   #+END_SRC

   Собственно описание модуля вынесено в файл [[file:bratan.org]]

** TODO Граббер тем мотобратана
** TODO Посты
** TODO Багзилла
** TODO Шаринг
* Сборка
** Утилиты
   #+NAME: utility_file
   #+BEGIN_SRC lisp :tangle src/util.lisp :noweb tangle :exports code  :padline no :comments link
     ;;;; util.lisp

     (in-package #:moto)

     <<get_obj_data>>

     <<make_clause_list>>

     <<err_bprint_macro>>

     <<dbgout>>

     <<alist_plist>>

     <<with_wrapper>>

     <<frm>>

     <<with_collection>>

     <<with_element>>

     <<replace_all>>

     <<explore_dir>>
   #+END_SRC

   #+NAME: get_obj_data
   #+BEGIN_SRC lisp
     ;; Превращает инициализированные поля объекта в plist
     (defun get-obj-data (obj)
       (let ((class (find-class (type-of obj)))
             (result))
         (loop :for slot :in (closer-mop:class-direct-slots class) :collect
            (let ((slot-name (closer-mop:slot-definition-name slot)))
              (when (slot-boundp obj slot-name)
                (setf result
                      (append result (list (intern (symbol-name slot-name) :keyword)
                                           (funcall slot-name obj)))))))
         result))
   #+END_SRC

   #+NAME: make_clause_list
   #+BEGIN_SRC lisp
     ;; Assembly WHERE clause
     (defun make-clause-list (glob-rel rel args)
       (append (list glob-rel)
               (loop
                  :for i
                  :in args
                  :when (and (symbolp i)
                             (getf args i)
                             (not (symbolp (getf args i))))
                  :collect (list rel i (getf args i)))))
   #+END_SRC

   #+NAME: err_bprint_macro
   #+BEGIN_SRC lisp
     ;; Макросы для корректного вывода ошибок
     (defmacro bprint (var)
       `(subseq (with-output-to-string (*standard-output*)  (pprint ,var)) 1))

     (defmacro err (var)
       `(error (format nil "ERR:[~A]" (bprint ,var))))
   #+END_SRC

   #+NAME: dbgout
   #+BEGIN_SRC lisp
     ;; Отладочный вывод
     (defparameter *dbg-enable* t)
     (defparameter *dbg-indent* 1)

     (defun dbgout (out)
       (when *dbg-enable*
         (format t (format nil "~~%~~~AT~~A" *dbg-indent*) out)))

     (defmacro dbg (frmt &rest params)
       `(dbgout (format nil ,frmt ,@params)))

     ;; (macroexpand-1 '(dbg "~A~A~{~A~^,~}" "zzz" "34234" '(1 2 3 4)))
   #+END_SRC

   #+NAME: alist_plist
   #+BEGIN_SRC lisp
     (defun anything-to-keyword (item)
       (intern (string-upcase (format nil "~a" item)) :keyword))

     (defun alist-to-plist (alist)
       (if (not (equal (type-of alist) 'cons))
           alist
           ;;else
           (loop
              :for (key . value)
              :in alist
              :nconc (list (anything-to-keyword key) value))))
   #+END_SRC

   Враппер управляет сесииями и выводит все в основной (root-овый) шаблон

   #+NAME: with_wrapper
   #+BEGIN_SRC lisp
     (in-package #:moto)

     (defmacro with-wrapper (&body body)
       `(progn
          (hunchentoot:start-session)
          (let* ((*current-user* (hunchentoot:session-value 'current-user))
                 (retval)
                 (output (with-output-to-string (*standard-output*)
                           (setf retval ,@body))))
            (declare (special *current-user*))
            (tpl:root
             (list
              :title "title"
              :content (format nil "~{~A~}"
                               (list
                                (tpl:dbgblock  (list :dbgout output))
                                (tpl:userblock (list :currentuser
                                                     (if (null *current-user*)
                                                         "none"
                                                         ,*current-user*)))
                                (if *current-user*
                                    (tpl:msgblock
                                     (list :msgcnt (get-undelivered-msg-cnt *current-user*)))
                                    "")
                                (tpl:retvalblock (list :retval retval)))))))))
   #+END_SRC

   Для того чтобы генерировать и выводить элементы форм, напишем хелперы:

   #+NAME: frm
   #+BEGIN_SRC lisp
     (in-package #:moto)

     (defun input (type &key name value)
       (format nil "~%<input type=\"~A\"~A~A/>" type
               (if name  (format nil " name=\"~A\"" name) "")
               (if value (format nil " value=\"~A\"" value) "")))

     ;; (input "text" :name "zzz" :value 111)
     ;; (input "submit" :name "submit-btn" :value "send")

     (defun fld (name &optional (value ""))
       (input "text" :name name :value value))

     (defun btn (name &optional (value ""))
       (input "button" :name name :value value))

     (defun hid (name &optional (value ""))
       (input "hidden" :name name :value value))

     (defun submit (&optional value)
       (if value
           (input "submit" :value value)
           (input "submit")))

     (defmacro row (title &body body)
       `(format nil "~%<tr>~%<td>~A</td>~%<td>~A~%</td>~%</tr>"
                ,title
                ,@body))

     ;; (row "thetitrle" (submit))

     (defun td (dat)
       (format nil "~%<td>~%~A~%</td>" dat))

     (defun tr (&rest dat)
       (format nil "~%<tr>~%~{~A~}~%</tr>"
               dat))

     ;; (tr "wfewf")
     ;; (tr "wfewf" 1111)

     (defun frm (contents &key name (method "POST"))
       (format nil "~%<form method=\"~A\"~A>~{~A~}~%</form>"
               method
               (if name (format nil " name=\"~A\"" name) "")
               (if (consp contents)
                   contents
                   (list contents))))

     ;; (frm "form-content" :name "nnnnn")

     (defun tbl (contents &key name border)
       (format nil "~%<table~A~A>~{~A~}~%</table>"
               (if name (format nil " name=\"~A\"" name) "")
               (if border (format nil " border=\"~A\"" border) "")
               (if (consp contents)
                   contents
                   (list contents))))

     ;; (tbl (list "zzz") :name "table")

     ;; (frm (tbl (list (row "username" (fld "user")))))
   #+END_SRC

   Чтобы выводить коллекции напишем макрос

   #+NAME: with_collection
   #+BEGIN_SRC lisp

     (defmacro with-collection ((item collection) &body body)
       `(loop :for ,item :in ,collection :collect
           ,@body))
   #+END_SRC

   Чтобы выводить элемент коллекции напишем макрос

   #+NAME: with_element
   #+BEGIN_SRC lisp

     (defmacro with-element ((item elt) &body body)
       `(let ((,item ,elt))
          (list
           ,@body)))
   #+END_SRC

   Репласер

   #+NAME: replace_all
   #+BEGIN_SRC lisp

     (defun replace-all (string part replacement &key (test #'char=))
       "Returns a new string in which all the occurences of the part
     is replaced with replacement."
       (with-output-to-string (out)
         (loop with part-length = (length part)
            for old-pos = 0 then (+ pos part-length)
            for pos = (search part string
                              :start2 old-pos
                              :test test)
            do (write-string string out
                             :start old-pos
                             :end (or pos (length string)))
            when pos do (write-string replacement out)
            while pos)))
   #+END_SRC

   #+NAME: explore_dir
   #+BEGIN_SRC lisp

     (defun explore-dir (path)
       (let ((raw (directory path))
             (dirs)
             (files))
         (mapcar #'(lambda (x)
                     (if (cl-fad:directory-pathname-p x)
                         (push x dirs)
                         (push x files)))
                 raw)
         (values dirs files raw)))
   #+END_SRC

** Шаблоны

   Шаблоны будем вставлять в отдельный файл =src/templates.htm=

   #+NAME: templates
   #+BEGIN_SRC closure-template-html :tangle src/templates.htm :noweb tangle :exports code :padline no :comments link
     // -*- mode: closure-template-html; fill-column: 140 -*-

     {namespace tpl}

     {template root}
         <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">{\n}
         <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">{\n}
             <head>{\n}
                 <title>{$headtitle}</title>{\n}
                 <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />{\n}
                 <link rel="stylesheet" type="text/css" media="screen" href="/css/style.css" />{\n}
                 <link rel="Shortcut Icon" type="image/x-icon" href="/img/favicon.ico" />{\n}
                 <script type="text/javascript" src="/js/jquery-1.5.2.min.js"></script>
                 <script type="text/javascript" src="/js/comment.js"></script>
             </head>{\n}
             <body id="top">{\n}
                 {$content | noAutoescape}{\n}
             </body>{\n}
         </html>{\n}
     {/template}


     {template dbgblock}
         <div style="border: 1px solid red; background-color: #CCCCCC; padding: 2px 20px 2px 20px;">
             <pre>{$dbgout | noAutoescape}</pre>
         </div>
     {/template}

     {template userblock}
         <div style="border: 1px solid red; background-color: #CCCCCC; padding: 2px 20px 2px 20px;">
             <pre>Текущий пользователь: {$currentuser | noAutoescape}</pre>
         </div>
     {/template}

     {template retvalblock}
         <div style="border: 1px solid red; background-color: #FFFFFF; padding: 2px 20px 2px 20px;">
             {$retval | noAutoescape}
         </div>
     {/template}

     {template msgblock}
         <div style="border: 1px solid red; background-color: #FFFFFF; padding: 2px 20px 2px 20px;">
             Новых сообщений: {$msgcnt | noAutoescape}
         </div>
     {/template}
   #+END_SRC

** Глобальные определения

   #+NAME: globals
   #+BEGIN_SRC lisp :tangle src/globals.lisp :noweb tangle :exports code :padline no :comments link
     (in-package #:moto)

     ;; Подключение к базе данных
     (defvar *db-name* "ylg_new")
     (defvar *db-user* "ylg")
     (defvar *db-pass* "6mEfBjyLrSzlE")
     (defvar *db-serv* "localhost")

     (defvar *db-spec* (list "ylg_new" "ylg" "6mEfBjyLrSzlE" "localhost"))

     ;; clear db
     (let ((tables '("user" "role" "group" "user2group" "avatar" "msg" "flat" "que" "quelt" "bratan" "cmpx" "plex")))
       (flet ((rmtbl (tblname)
                (when (with-connection *db-spec*
                        (query (:select 'table_name :from 'information_schema.tables :where
                                        (:and (:= 'table_schema "public")
                                              (:= 'table_name tblname)))))
                  (with-connection *db-spec*
                    (query (:drop-table (intern (string-upcase tblname))))))))
         (loop :for tblname :in tables :collect
            (rmtbl tblname))))
   #+END_SRC

** Каркас проекта

   Для генерации "с чистого листа" необходимы функции генерации сущностей, они лежат в
   файле =generators.el=

   Чтобы их подключить - можно сделать M-x load-file generators.el в emacs-е.

   Эти функции помещаются в =generators.el= при =tangle= и редактировать их можно в
   соответствующем разделе этого файла. Для успешной генерации сущностей, они должны быть
   загружены в emacs.

   Файл =prepare= должен идти до файла =util= и остальных, так как в нем компилируются
   шаблоны, от которых зависит =util=

   Файл =globals= должен идти до файла =entity= так как в нем происходит подключение к базе
   данных, которое используют тесты сущностей и автоматов.

   #+NAME: defsystem
   #+BEGIN_SRC lisp :tangle moto.asd :noweb tangle :exports code :padline no :comments link
     ;;;; moto.asd

     (asdf:defsystem #:moto
       :serial t
       :pathname "src"
       :depends-on (#:closer-mop
                    #:postmodern
                    #:anaphora
                    #:cl-ppcre
                    #:restas
                    #:restas-directory-publisher
                    #:closure-template
                    #:cl-json
                    #:cl-base64
                    #:drakma
                    #:split-sequence)
       :description "site for bikers"
       :author "rigidus"
       :version "0.0.3"
       :license "GPLv3"
       :components ((:file "package")    ;; файл пакетов
                    (:static-file "templates.htm")
                    (:file "prepare")    ;; подготовка к старту
                    (:file "util")       ;; файл с утилитами
                    (:file "globals")    ;; файл с глобальными определеями
                    ;; Модуль сущностей, автоматов и их тестов
                    <<mod_entity>>
                    (:file "entityes")   ;; Сущности и автоматы
                    (:file "moto")       ;; стартовый файл
                    ;; Модуль авторизации (зависит от определения сущностей в стартовом файле)
                    <<mod_auth>>
                    ;; Модуль очередей
                    <<mod_que>>
                    ;; Модуль сообщений
                    <<mod_msg>>
                    ;; Модуль trend
                    <<mod_trend>>
                    ;; Модуль мотобратан
                    <<mod_bratan>>
                    (:file "events")     ;; события системы
                    (:file "iface")      ;; файл веб-интерфейса
                    ))
   #+END_SRC

** Пакеты

   Соберем весь код в пакет:

   #+NAME: package
   #+BEGIN_SRC lisp :tangle src/package.lisp :noweb tangle :exports code :padline no :comments link
     ;;;; package.lisp

     (restas:define-module #:moto
       (:use  #:cl #:closer-mop #:postmodern #:anaphora #:hunchentoot)
       (:shadowing-import-from #:closer-mop
                               #:defclass
                               #:defmethod
                               #:standard-class
                               #:ensure-generic-function
                               #:defgeneric
                               #:standard-generic-function
                               #:class-name))
   #+END_SRC

** Подготовка к старту

   Подготовка включает в себя загрузку всех необходимых библиотек, компиляцию шаблонов, и,
   возможно, инициализацию окружения.

   #+NAME: prepare
   #+BEGIN_SRC lisp :tangle src/prepare.lisp :noweb tangle :exports code :exports none :padline no :comments link
     ;;;; prepare.lisp

     (in-package #:moto)

     (defparameter *repo-folder* "repo")
     (defparameter *prj-folder* "moto")

     ;; Базовый путь, от которого будем все считать
     (defparameter *base-path*
       (format nil "~A~A"
               (namestring (user-homedir-pathname))
               (format nil "~A/~A/src/"
                       ,*repo-folder*
                       ,*prj-folder*)))

     ;; Путь к данным
     (defparameter *data-path*
       (format nil "~A~A"
               (namestring (user-homedir-pathname))
               (format nil "~A/~A/data/"
                       ,*repo-folder*
                       ,*prj-folder*)))

     ;; Компилируем шаблоны
     (closure-template:compile-template
      :common-lisp-backend (pathname (concatenate 'string *base-path* "templates.htm")))
   #+END_SRC

** Точка входа
   #+NAME: enter_point
   #+BEGIN_SRC lisp :tangle src/moto.lisp :noweb tangle :exports code :padline no :comments link
     ;;;; moto.lisp

     (in-package #:moto)

     ;; start
     (restas:start '#:moto :port 9997)
     (restas:debug-mode-on)
     ;; (restas:debug-mode-off)
     (setf hunchentoot:*catch-errors-p* t)
   #+END_SRC

** Readme
   #+NAME: enter_point
   #+BEGIN_SRC org :tangle README.org :noweb tangle :exports code
     Этот документ отвечает на вопросы
     - Что нужно сделать чтобы собрать проект
     - Что нужно сделать чтобы запусить собранный проект

     Можно запустить проект не собирая его, если вы просто хотите
     попробовать.

     ,* Сборка

       На момент, когда вы начнете это делать у вас должны стоять:
       - emacs (http://www.gnu.org/software/emacs/)
       - git (http://git-scm.com/)
       - sbcl (http://sbcl.org/)
       - quicklisp (http://quicklisp.org/)
       - postgresql (http://www.postgresql.org/)
       Их установка как правило тривиальна, поэтому не будет здесь
       описываться.

       Перед тем, как начать сборку, создаем каталог, где будет все лежать
       и переходим в него:

       =mkdir ~/repo=
       =cd ~/repo=

     ,** Orgmode

        Находясь в каталоге =~/repo=, скачиваем последнюю версию
        =org-mode= - расширения, которое уже стоит в емаксе, но к
        сожалению, часто не самой свежей версии. В той версии, которую я
        использую поменялся способ работы с org-tables, поэтому я
        рекомендую забирать версию с моего репозитория:

        =git-clone https://github.com/rigidus/org-mode.git=

        Переходим в появившийся каталог и собираем:

        =cd org-mode/lisp=
        =make autoloads=

        Открываем файл конфигурации emacs ~/.emacs.d/init.el и прописываем
        собранный org-mode:

        =;; OrgMode http://orgmode.org/manual/Installation.html=
        =(add-to-list 'load-path "/home/rigidus/repo/org-mode/lisp")=
        =(require 'org-install)=

        Возвращаемся в исходный каталог

        =cd ~/repo=

     ,** Проект

        Скачиваем последнюю версию проекта:

        =cd ~/repo=
        =git-clone https://github.com/rigidus/moto.git=

        Открываем =~/repo/moto/doc.org= в emacs-e

        Загружаем генераторы:

        =M-x load-file= =~/repo/moto/generators.el=

        Без этого шага при генерации не найдуться некоторые необходимые
        функции, что вызовет ошибку генерации.

        Выполняем генерацию кода (org-babel-tangle) в открытом в emacs-е
        файле =~/repo/moto/doc.org=, нажимая комбинацию клавишь =C-c C-v t=

        Сгенерируется множество файлов проекта, в основном в каталоге
        =~/repo/moto/src=

        Выполняем генерацию документации в формате html (org-export) в
        открытом в emacs-е файле =~/repo/moto/doc.org= нажимая комбинацию
        клавишь =C-c C-e h=

        Сгенерируется файл документации =~/repo/moto/doc.html=

        Аналогичным образом можно поступать со всеми файлами модулей - это
        файлы с расширением =org=, которые лежат в корневом каталоге
        =~/repo/moto/=

        Если понадобится изменить процесс генерации - функции, которые за
        него отвечают лежат в "Определения сущностей" -> "Функции для
        кодогенерации сущностей"

     ,* Запуск

       Чтобы запустить проект, необходимо иметь:
       - sbcl
       - quicklisp
         Необходимо, чтобы quicklisp мог найти систему проекта. Для этого
         в =~/.sbclrc= дописываем следущий код

         ,#+BEGIN_SRC lisp
           ,#+quicklisp
           (mapcar #'(lambda (x)
                       (pushnew x ql:*local-project-directories*))
                  (list
                        #P"~/repo/moto/"
                        ))
         ,#+END_SRC

       - postgres
       Эти данные для входа лежат в ~/repo/moto/doc.org в разделе
       "Глобальные определения"
         - Пользователя postgres
         - Базу данных

       Обеспечив выполнение этих условий, заходим в =emacs=, набираем =M-x
       slime= и в открывшемся буфере =(ql:quickload "moto")=

       Все должно заработать. Если нет - связывайтесь со мной.

       Чуть не забыл, веб-интерфейс размещен на порту 9997

     ,* Установка и настройка Postgres

       ,#+BEGIN_COMMENT
           TODO сделать линки на получение значений с глобальных определений doc.org, если возможно
       ,#+END_COMMENT

       В =~/repo/moto/doc.org= в секции "Глобальные определения" написаны имя базы данных, логин и пароль

       Для систем Ubuntu/Debian:

       ,#+BEGIN_SRC bash
          sudo apt-get install postgresql postgresql-contrib postgresql-client
          sudo -i -u postgres

          postgres$ createuser --interactive
          ....
          postgres$ createdb DB_NAME
          postgres$ psql -d DB_NAME
       ,#+END_SRC

       В консоль postrges ввести:

       ,#+BEGIN_SRC psql
          ALTER USER ylg PASSWORD '...';
          \q
       ,#+END_SRC

       См. туториал https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-14-04

     ,* Зачем это все

       Это все было задумано и написано (и пишется в данный момент) как
       исследование ряда подходов в программировании в применении к
       конкретным практическим задачам. Ну и ради общественной пользы,
       понимаемой очень широко, включая как пользу от самого продукта, так
       и пользу от исследуемых технологий и приемов их применения.

       Весь код лицензируется под свободной лицензией GPLv3 и вы вправе
       реализовывать все связанные с этим свободы. Контрибьюторы
       приветствуются, не только в написании кода, но и в привлечении
       пользователей, изучении технологий, тестировании и критике идей.

       Если есть какой-то вопрос или непонятный момент - не стесняйтесь
       писать прямо в гитхаб.


   #+END_SRC

* Идеи
  http://www.motobratan.ru/motoprogress/230.html
  Флип-чарт - как чопперасты видят: спортбайкеров, эндурастов етц
  Только отслеживаемые люди (веб-камера, документ етц)

  Что такое Кодекс чести Coursera?

    Я зарегистрирую только одну учётную запись.
    Все мои ответы на задания, включая опросы и экзамены будут моей собственной работой (за
    исключением заданий, которые недвусмысленно допускают возможность совместной работы).
    Я не буду выкладывать в открытый доступ ответы на вопросы домашних работ, опросов или
    экзаменов. Это включает как написанные мною лично ответы на вопросы, так и любые
    официальные ответы, предоставленные сотрудниками курса.
    Я не буду прибегать к каким-либо уловкам, с помощью которых обманным путём могут быть
    улучшены мои результаты или улучшены/ухудшены результаты других.

    Курсы по ремонту мотоциклов

    Умный поиск с привязкой к местонахождению. Ищу то-то - поиск по товарам с ценами и расстоянием

    Технологическая репутация пользователей - кто как относится к своим мотоциклам. Может
    заполняться сервис-менами.

  Специальная система приглашений - ты можешь завести друга, а потому передать ему его
  аккаунт

  Не забыть адреса травмпунктов и контакты хороших врачей и юристов
