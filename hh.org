#+HTML_HEAD: -*- fill-column: 92 -*-

#+TITLE: Модуль HeadHunter

#+NAME:css
#+BEGIN_HTML
<link rel="stylesheet" type="text/css" href="css/css.css" />
#+END_HTML

TODO: Обсудить все нижеследующее с hr-специалистами

* Введение

  Мы все ищем работу на профильных сайтах, но, к сожалению, не всегда на них хватает
  функционала, особенно нестандартного. Работая с сайтом в автоматическом режиме мы можем
  восполнить этот пробел.

  Кроме того есть множество конкурирующих сайтов для поиска работы, информацию с которых
  можно аггрегировать.

  При поиске работы основной сценарий использования - поиск вакансий, и практически все
  сайты его предоставляют. Однако мне бы хотелось иметь функционал заметок по каждой
  вакансии и статусы, например: =просмотрено= (с датой), =отобрано=, =не-берут-трубку=,
  =не-актуально=, =приглашен-на-интервью=, =тестовое-задание=, =получен-оффер=,
  =отказано-работодателем=, =отказ-соискателя=, =вакансия-снята= итп.

  Я бы хотел ранжировать вакансии вручную (по выставленным приоритетам) и автоматически,
  например в зависимости от зарплаты или удаленности.

  В идеале я бы хотел иметь возможность планировать маршрут, когда еду на собеседование и
  иметь календарь, чтобы не пропустить встречу.

  Я бы хотел иметь версии вакансий, чтобы отслеживать их изменения, например изменения
  зарплаты до и после моего интервью - это позволит анализировать рынок и получать больше
  информации.

  Мне также интересно составлять профили компаний и отслеживать как меняется набор
  сотрудников которые им требуются - это поможет планировать долгосрочную
  стратегию. Особенно в этом плане интересны лидеры рынка - Яндекс, Гугл и.т.п.

  Почему сайты поиска работы не предоставляют подобный сервис для соискателей - для меня
  загадка и повод подумать над стартапом :) Кстати похожие кейсы наверное есть и в
  покупке/продаже автотранспорта или барахолках типа авито.

  Позже можно добавить социальный шаринг всего этого дела, чтобы любой соискатель мог
  рассказать о своем опыте взаимодействия с потенциальным работодателем.

  Иногда мне приятно работать с уже знакомыми людьми, так что в целом я бы не отказался
  создавать на таком сайте что-то типа т.н. =рабочих коллективов=, чтобы наниматься сразу
  командой. Возможно работодателям такой вариант найма тоже будет интересен.

* Сценарии использования
** Загрузка данных

   Чтобы у нас были данные, с которыми мы собираемся работать - их надо откуда-то
   собрать, например, с профильных сайтов, таких как http://hh.ru

   Разумеется, лучше собирать не все подряд, а только то что необходимо соискателю. Когда
   соискатель пользуется профильным сайтом он использует поисковые запросы, на основании
   которых мы можем формировать, гм... назовем это =поисковыми профилями=. Поисковый
   профиль - это запрос пользователя, плюс связанные с ним данные - =сборок=.

   Сборки по одному поисковому профилю могут осуществляться в разное время и часто интересны
   тем, что можно посмотреть как появляются и исчезают вакансии. В каждой сборке содержится
   набор =вакансий=, при этом одни и те же по сути вакансии в разных сборках связываются
   между собой, чтобы можно было отслеживать изменения вакансии с течением времени.

   Вакансии на сайта размещаются =компаниями= и привязываются к ним. Мне как соискателю
   интересно посмотреть какие вакансии размещала ранее конкретная компания, какие она
   размещает теперь, как изменялись зарплаты - и тому подобная аналитическая информация.

   Загрузка данных начинается с автоматического использования поиска. Мне интересны разные
   поисковые запросы - например, "веб-программист", "менеджер проекта", "руководитель
   отдела" и.т.п. По каждому из них можно составить поисковый профиль, который кроме текущих
   актуальных вакансий в нем содержит еще и "сборки" - с датой и временем получения данных и
   "изменения", т.е диффы между предыдущей сборкой и этой. Так можно отслеживать только
   новые вакансии.

   Мне бы хотелось осуществлять =сбор данных в многопоточном режиме=.

** Поиск вакансий

   Внутри ваканий необходимо искать по критериям, которые я уточню позже

** Просмотр и отбор вакансий, заметки и выставление статусов

   Когда я читаю вакансию, я бы хотел, чтобы она переходила в статус "просмотрено" (и к ней
   добавлялась дата просмотра)

   Читая вакансию, мне бы хотелось устанавливать ей приоритет и вносить заметки, чтобы
   отслеживать такие моменты, как, например, необходимость позвонить позже или все что мне
   сказал hr по телефону. Есть типовые вещи, которые можно просто сделать кнопками

   Если я отправляю отзыв на вакансию или звоню по телефону - я бы хотел, чтобы эти действия
   сопровождались временем и изменением статуса, чтобы потом можно было отследить историю
   взаимодействия с фирмой.

   При этом, мне хотелось бы видеть на дашборде те вакансии, с которыми я договорился о
   встрече и те, по которым нет движения долгое время, чтобы ничего не забывалось.

** Дашборд

   Если у нас есть формализованный алгоритм (а он есть так как найм - это линейный процесс),
   то я хочу получать напоминания о моем следующем шаге в отношении тех вакансий, которые
   мне интересны.

** Отзывы соискателей о компаниях и вакансиях
** Маршрут

   Иногда я хочу спланировать маршрут поездки по собеседованиям. Это сервис с картами,
   которые можно сделать позже.

* Сущности
** Поисковые профили

   #+CAPTION: Данные пользователя
   #+NAME: search_profile_flds
     | field name | field type           | note                                      |
     |------------+----------------------+-------------------------------------------|
     | id         | serial               | идентификатор                             |
     | user-id    | integer              | владелец и создатель                      |
     | query      | varchar              | поисковый запрос                          |
     | ts-create  | bigint               | время создания                            |
     | ts-last    | bigint               | время когда был использован последний раз |

** Сборки
** Вакансии
** Компании
* Interface

  Соберем веб-интерфейс:

  #+NAME: iface
  #+BEGIN_SRC lisp :tangle src/mod/hh/iface.lisp :noweb tangle :exports none :padline no :comments link
    ;;;; iface.lisp

    (in-package #:moto)

    ;; Страницы
    <<iface_contents>>
  #+END_SRC

** Дашборд
* Тесты

  #+NAME: hh_test
  #+BEGIN_SRC lisp :noweb tangle :exports none

    ;; Тестируем hh
    (defun hh-test ()
      <<hh_test_contents>>
      (dbg "passed: hh-test~%"))
    (hh-test)
  #+END_SRC

  #+NAME: hh_test_contents
  #+BEGIN_SRC lisp :noweb tangle :exports none

  #+END_SRC
* Точки входа

  Соберем шаблоны:

  #+NAME: hh_tpl
  #+BEGIN_SRC closure-template-html :tangle src/mod/hh/hh-tpl.htm :noweb tangle :exports none
    // -*- mode: closure-template-html; fill-column: 140 -*-
    {namespace hhtpl}

    <<hhtpl_contents>>
  #+END_SRC

  Скомпилируем шаблоны при подготовке модуля

  #+NAME: hh_prepare
  #+BEGIN_SRC lisp :tangle src/mod/hh/hh-prepare.lisp :noweb tangle :exports none
    (in-package #:moto)

    ;; Скомпилируем шаблон
    (closure-template:compile-template
     :common-lisp-backend
     (pathname
      (concatenate 'string *base-path* "mod/hh/hh-tpl.htm")))
  #+END_SRC

  Соберем контроллеры и все функции, которые контроллеры вызывают

  #+NAME: hh_fn
  #+BEGIN_SRC lisp :tangle src/mod/hh/hh.lisp :noweb tangle :exports none
    (in-package #:moto)

    <<flat_entity>>

    <<hh_fn_contents>>

    <<hh_test>>
  #+END_SRC

* Сборка
** Сущности и автоматы

   Соберем все сущности и автоматы

   #+NAME: entity_and_automates
   #+BEGIN_SRC lisp :tangle src/mod/hh/entityes.lisp :noweb tangle :exports none :padline no :comments link
     (in-package #:moto)

     <<asm_search_profile()>>

   #+END_SRC

** Поисковые профили

    #+NAME: asm_search_profile
    #+BEGIN_SRC emacs-lisp :var flds=search_profile_flds :exports none
      (gen-entity "search-profile" "поисковые профили" flds)
    #+END_SRC
