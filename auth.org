#+HTML_HEAD: -*- fill-column: 92 -*-

#+TITLE: Модуль авторизации и аккаунтинга

#+NAME:css
#+BEGIN_HTML
<link rel="stylesheet" type="text/css" href="css/css.css" />
#+END_HTML

* Введение

  Как пользователь я хочу иметь возможность зарегистрироваться на сайте. Сразу после
  регистрации я хочу быть залогиненным в авторизованную сессию.

  Как пользователь, я хочу иметь возможность выйти из авторизованной сессии после окончания
  работы.

  Как пользователь, я хочу войти в авторизованную сессию по своему емейлу и паролю.

  Как разработчик, я хочу конфигурировать url-ы, на которые попадает пользователь при
  выполнении этого сценария и навешивать свои обработчики на события:
  - регистрация пользователя
  - успешный вход пользователя
  - неуспешный вход пользователя
  - выход пользователя

  Что нам для этого нужно?
  - Сущность =User=, имеющая поля =email= и =password=
  - Движок создания форм, функции которого определены не здесь

  Как это работает?

  =При регистрации= пользователь заполняет форму с именем, емейлом и паролем на странице
  регистрации. Страница регистрации доступна только есои пользователь в данный момент не
  залогинен. Контроллер регистрации получает данные формы и вызывает событие создания
  пользователя (=create-user=).

  =При логине= пользователь вводит email и пароль, который передается контроллеру
  логина. Контроллер логина извлекает (=get-auth-data=) email и пароль, проверяет их
  (=check-auth-data=) и в случае успеха устанавливает переменную сессии =current-user= и
  вызывает =auth-success=. В случае неудачи вызывает =auth-fail=.

* Шаблоны
  Соберем шаблоны логина и логаута

  #+NAME: auth_tpl
  #+BEGIN_SRC closure-template-html :tangle src/mod/auth/auth-tpl.htm :noweb tangle :exports code
    // -*- mode: closure-template-html; fill-column: 140 -*-
    {namespace authtpl}

    {template logintpl}
      <<loginform_tpl>>
    {/template}

    {template logouttpl}
      <<logoutform_tpl>>
    {/template}
  #+END_SRC

* Функционал

  Соберем контроллеры и все функции, которые контроллеры вызывают

  #+NAME: auth_fn
  #+BEGIN_SRC lisp :tangle src/mod/auth/auth.lisp :noweb tangle :exports code
    (in-package #:moto)

    ;; Скомпилируем шаблон
    (closure-template:compile-template
     :common-lisp-backend
     (pathname
      (concatenate 'string *base-path* "mod/auth/auth-tpl.htm")))

    <<auth_fn_contents>>

    <<auth_test>>
  #+END_SRC

  Мы вводим:

** Шаблон логина

   #+NAME: loginform_tpl
   #+BEGIN_SRC html :exports code
     <form method="POST" name="loginform">
         <input type="text" id="login" name="login" />
         <input type="password" id="password" name="password" />
         <input type="submit" />
     </form>
   #+END_SRC

** Шаблон логаута

   #+NAME: logoutform_tpl
   #+BEGIN_SRC html :exports code
     <form method="POST" name="logoutform">
         <input type="hidden" name="logout" value="logout" />
         <input type="submit" value="logout" />
     </form>
   #+END_SRC

** Страница регистрации и ее контроллер

   Страница регистрации использует движок форм для показа формы пользователю и при
   выполнении регистрации вызывает событие =create-user=.

   #+NAME: auth_fn_contents
   #+BEGIN_SRC lisp
     (in-package #:moto)

     ;; (print (macroexpand-1 '
     ;; (define-page reg "/reg"
     ;;   (ps-html
     ;;    ((:h1) "Страница регистрации")
     ;;    (if *current-user*
     ;;        "Регистрация невозможна - пользователь залогинен"
     ;;        (ps-html
     ;;         ((:form :method "POST")
     ;;          ((:table :border 0)
     ;;           ((:tr)
     ;;            ((:td) "Имя пользователя: ")
     ;;            ((:td) ((:input :type "text" :name "name" :value ""))))
     ;;           ((:tr)
     ;;            ((:td) "Пароль: ")
     ;;            ((:td) ((:input :type "password" :name "password" :value ""))))
     ;;           ((:tr)
     ;;            ((:td) "Email: ")
     ;;            ((:td) ((:input :type "email" :name "email" :value ""))))
     ;;           ((:tr)
     ;;            ((:td) "")
     ;;            ((:td) %register%)))))))
     ;;   (:register (ps-html
     ;;               ((:input :type "hidden" :name "act" :value "REGISTER"))
     ;;               ((:input :type "submit" :value "Зарегистрироваться")))
     ;;              (setf (hunchentoot:session-value 'current-user)
     ;;                    (create-user (getf p :name)
     ;;                                 (getf p :password)
     ;;                                 (getf p :email)))))))

     ;; (print (macroexpand-1 '
     ;; (WITH-WRAPPER
     ;;   (PS-HTML ((:H1) "Страница регистрации")
     ;;            (IF *CURRENT-USER*
     ;;                "Регистрация невозможна - пользователь залогинен"
     ;;                (PS-HTML
     ;;                 ((:FORM :METHOD "POST")
     ;;                  ((:TABLE :BORDER 0)
     ;;                   ((:TR) ((:TD) "Имя пользователя: ")
     ;;                    ((:TD) ((:INPUT :TYPE "text" :NAME "name" :VALUE ""))))
     ;;                   ((:TR) ((:TD) "Пароль: ")
     ;;                    ((:TD)
     ;;                     ((:INPUT :TYPE "password" :NAME "password" :VALUE
     ;;                              ""))))
     ;;                   ((:TR) ((:TD) "Email: ")
     ;;                    ((:TD)
     ;;                     ((:INPUT :TYPE "email" :NAME "email" :VALUE ""))))
     ;;                   ((:TR) ((:TD) "") ((:TD) %REGISTER%))))))))))

     (SYMBOL-MACROLET ((%REGISTER%
                        (PS-HTML
                         ((:INPUT :TYPE "hidden" :NAME "act" :VALUE "REGISTER"))
                         ((:INPUT :TYPE "submit" :VALUE "Зарегистрироваться")))))
       (RESTAS:DEFINE-ROUTE REG
           ("/reg")
         (PROGN
           (START-SESSION)
           (LET* ((*CURRENT-USER* (SESSION-VALUE 'CURRENT-USER)) (RETVAL))
             (DECLARE (SPECIAL *CURRENT-USER*))
             (HANDLER-CASE
                 (LET ((OUTPUT
                        (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*)
                          (SETF RETVAL
                                (PS-HTML ((:H1) "Страница регистрации")
                                         (IF *CURRENT-USER*
                                             "Регистрация невозможна - пользователь залогинен"
                                             (PS-HTML
                                              ((:FORM :METHOD "POST")
                                               ((:TABLE :BORDER 0)
                                                ((:TR) ((:TD) "Имя пользователя: ")
                                                 ((:TD)
                                                  ((:INPUT :TYPE "text" :NAME "name"
                                                           :VALUE ""))))
                                                ((:TR) ((:TD) "Пароль: ")
                                                 ((:TD)
                                                  ((:INPUT :TYPE "password" :NAME
                                                           "password" :VALUE ""))))
                                                ((:TR) ((:TD) "Email: ")
                                                 ((:TD)
                                                  ((:INPUT :TYPE "email" :NAME "email"
                                                           :VALUE ""))))
                                                ((:TR) ((:TD) "")
                                                 ((:TD) %REGISTER%)))))))))))
                   (TPL:LOUIS
                    (LIST
                     :HEADER
                     (TPL:HEADER)
                     :CONTENT
                     (tpl:reg
                      (list :test (form ("regform" "Регистрационные данные")
                                        (fieldset "Обязательные поля"
                                          (input ("mail" "Электронная почта" :required t :type "email" :maxlength "50" ) "Please enter a valid email address.")
                                          (input ("password" "Пароль" :required t :type "password" :autocomplete "off"))
                                          (input ("password-confirm" "Повторите пароль" :required t :type "password" :autocomplete "off"))
                                          (input ("nickname" "Никнейм" :required t :maxlength "50")))
                                        (fieldset "Необязательные поля"
                                          (input ("firstname" "Имя" :maxlength "25" ))
                                          (input ("lastname" "Фамилия" :maxlength "25" ))
                                          (input ("telephone" "Телефон" :maxlength "15" :container-class "input-container--1-2 odd") "Номер телефона неверный или неполный")
                                          (input ("mobile" "Мобильный телефон" :maxlength "15" :container-class "input-container--1-2 even") "Номер телефона неверный или неполный")
                                          (select ("sex" "Пол")
                                            (option "Please select" "Выбрать пол")
                                            (option "male" "Мужской")
                                            (option "female" "Мужской"))
                                          (ps-html
                                           ((:div :class "date-container")
                                            ((:label :for "date-of-birth") "День рождения")
                                            ((:div :class "date-container__inputs fieldset-validation")
                                             (input ("birth-day" "DD" :maxlength "2" :container-class "hide-label input-container--1st"))
                                             (input ("birth-day" "MM" :maxlength "2" :container-class "hide-label input-container--2nd input-container--middle"))
                                             (input ("birth-day" "MM" :maxlength "4" :container-class "hide-label input-container input-container--3rd")))))
                                          )
                                        (submit "Зарегистрироваться"))))
                     ;; (TPL:CONTENT
                     ;;  (LIST :INCONTENT
                     ;;        (FORMAT NIL "~{~A~}"
                     ;;                (LIST (TPL:DBGBLOCK (LIST :DBGOUT OUTPUT))
                     ;;                      (TPL:USERBLOCK
                     ;;                       (LIST :CURRENTUSER
                     ;;                             (IF (NULL *CURRENT-USER*)
                     ;;                                 "none"
                     ;;                                 *CURRENT-USER*)))
                     ;;                      (IF *CURRENT-USER*
                     ;;                          (TPL:MSGBLOCK
                     ;;                           (LIST :MSGCNT
                     ;;                                 (GET-UNDELIVERED-MSG-CNT
                     ;;                                  *CURRENT-USER*)))
                     ;;                          "")
                     ;;                      (TPL:MENUBLOCK
                     ;;                       (LIST :MENU
                     ;;                             (FORMAT NIL "~{~A<br />~}" (MENU))))
                     ;;                      (TPL:RETVALBLOCK (LIST :RETVAL RETVAL))))))
                     :FOOTER (TPL:FOOTER) :TITLE "title")))
               (AJAX (AJAX) (OUTPUT AJAX))))))

       (RESTAS:DEFINE-ROUTE REG-CTRL
           ("/reg" :METHOD :POST)
         (WITH-WRAPPER
           (LET* ((P (ALIST-TO-PLIST (POST-PARAMETERS*))))
             (COND
               ((STRING= "REGISTER" (GETF P :ACT))
                (SETF (SESSION-VALUE 'CURRENT-USER)
                      (CREATE-USER (GETF P :NAME) (GETF P :PASSWORD)
                                   (GETF P :EMAIL))))
               (T (FORMAT NIL "unk act : ~A" (BPRINT P))))))))
   #+END_SRC

** Событие создания пользователя

   #+NAME: auth_fn_contents
   #+BEGIN_SRC lisp
     (in-package #:moto)

     ;; Событие создания пользователя
     (defun create-user (name password email)
       "Создание пользователя. Возвращает id пользователя"
       (let ((user-id (id (make-user :name name :password password :email email :ts-create (get-universal-time) :ts-last (get-universal-time)))))
         (dbg "Создан пользователь: ~A" user-id)
         ;; Делаем его залогиненным
         (upd-user (get-user user-id) (list :state ":LOGGED"))
         ;; Возвращаем user-id
         user-id))
   #+END_SRC

** Страница выхода из системы и ее контроллер

   #+NAME: auth_fn_contents
   #+BEGIN_SRC lisp
     (in-package #:moto)

     (define-page logout "/logout"
       (ps-html
        ((:h1) "Страница выхода из системы")
        (if *current-user*
            (ps-html
             ((:form :method "POST")
              %logout%))
            "Выход невозможен - никто не залогинен"))
       (:logout (ps-html
                   ((:input :type "hidden" :name "act" :value "LOGOUT"))
                   ((:input :type "submit" :value "Выйти")))
                (prog1 (format nil "~A" (logout-user *current-user*))
                  (setf (hunchentoot:session-value 'current-user) nil))))
   #+END_SRC

** Событие выхода пользователя из системы

   #+NAME: auth_fn_contents
   #+BEGIN_SRC lisp
     (in-package #:moto)

     ;; Событие выхода
     (defun logout-user (current-user)
       (takt (get-user current-user) :unlogged))
   #+END_SRC

** Страница логина и ее контроллер

   Контроллер логина использует обобщенный метод =get-auth-data= для извлечения данных
   авторизации и функцию их проверки =check-auth-data=.

   При успешной проверке устанавливает переменную сессии =current-user= с помощью функции
   =set-session= и выполняет =login-user-success=.

   При неуcпехе выполняет =login-user-fail=.

   #+NAME: auth_fn_contents
   #+BEGIN_SRC lisp
     (in-package #:moto)

     (define-page login "/login"
       (ps-html
        ((:h1) "Страница авторизации")
        (if *current-user*
            "Авторизация невозможна - пользователь залогинен. <a href=\"/logout\">Logout</a>"
            (ps-html
             ((:form :method "POST")
              ((:table :border 0)
               ((:tr)
                ((:td) "Email: ")
                ((:td) ((:input :type "email" :name "email" :value ""))))
               ((:tr)
                ((:td) "Пароль: ")
                ((:td) ((:input :type "password" :name "password" :value ""))))
               ((:tr)
                ((:td) "")
                ((:td) %login%)))))))
       (:login (ps-html
                   ((:input :type "hidden" :name "act" :value "LOGIN"))
                   ((:input :type "submit" :value "Войти")))
               (aif (check-auth-data (get-auth-data (hunchentoot:post-parameters*)))
                    (progn
                      (setf (hunchentoot:session-value 'current-user) it)
                      (login-user-success it))
                    (login-user-fail))))
   #+END_SRC

** Обобщенный метод извлечения авторизационных данных

   В простейшем случае данные из объекта =request=, но возможны и другие варианты,
   поэтому этот обобщенный метод специфицируется объектом, из которого извлекаются данные.

   #+NAME: auth_fn_contents
   #+BEGIN_SRC lisp

     ;; Извлечение авторизационных данных
     (defmethod get-auth-data ((request list))
       (alist-to-plist request))
   #+END_SRC

** Функция проверки авторизационных данных - в простейшем случае логина и пароля

   Функция принимает в качестве параметра plist, который должен содержать =email= и
   =password= введенный пользователем.

   Функция проверяет, есть ли пользователь с этим email-ом и паролем и если есть -
   возвращает его id. Если нет - возвращает nil.

   #+NAME: auth_fn_contents
   #+BEGIN_SRC lisp

     ;; Проверка авторизационных данных
     (defun check-auth-data (auth-data)
       (let ((result (find-user :email (getf auth-data :email) :password (getf auth-data :password))))
         (if (null result)
             nil
             (id (car result)))))
   #+END_SRC

** Событие успешного входа пользователя в систему

   #+NAME: auth_fn_contents
   #+BEGIN_SRC lisp
     (in-package #:moto)

     ;; Событие успешного входа
     (defun login-user-success (id)
       (let ((u (get-user id)))
         (when (equal ":LOGGED" (state u))
           (upd-user u (list :state ":UNLOGGED")))
         (takt u :logged)))
   #+END_SRC

** Событие неуспешного входа пользователя в систему

   #+NAME: auth_fn_contents
   #+BEGIN_SRC lisp

     ;; Событие неуспешного входа
     (defun login-user-fail ()
       "Wrong auth"
       )
   #+END_SRC

** TODO Забыл пароль
** TODO Javascript для форм, необязательно
** TODO Функцию проверки залогинен ли пользователь

   Создадим функцию, которая проверяет залогинен ли пользователь

   #+NAME: is-logged
   #+BEGIN_SRC lisp :exports code
     ;; (defun is-logged (request)
     ;;   ( (session-value current-user
   #+END_SRC

** TODO Функцию проверки прав пользователя на доступ к какому-то объекту
* Тесты

  Теперь у нас есть весь необходимый функционал, для работы авторизации. Мы можем его
  протестировать, для этого сформируем тест:

  #+NAME: auth_test
  #+BEGIN_SRC lisp

    ;; Тестируем авторизацию
    (defun auth-test ()
      <<auth_test_contents>>
      (dbg "passed: auth-test~%"))
    (auth-test)
  #+END_SRC

  #+NAME: auth_test_contents
  #+BEGIN_SRC lisp
    (in-package #:moto)

    ;; Зарегистрируем пользователя
    (let* ((name "admin")
           (password "tCDm4nFskcBqR7AN")
           (email "nomail@mail.ru")
           (new-user-id (create-user name password email)))
      ;; Проверим что он существует
      (assert (get-user new-user-id))
      ;; Проверим, что он залогинен
      (assert (equal ":LOGGED" (state (get-user new-user-id))))
      ;; Выход пользователя из системы
      (logout-user new-user-id)
      ;; Проверим, что он разлогинен
      (assert (equal ":UNLOGGED" (state (get-user new-user-id))))
      ;; Логин пользователя в систему
      (let ((logged-user-id))
        (aif (check-auth-data (get-auth-data (list (cons 'email email)
                                                   (cons 'password password))))
             (progn
               (login-user-success it)
               (setf logged-user-id it))
             (login-user-fail))
        ;; Проверим, что успешно залогинился
        (assert (equal ":LOGGED" (state (get-user logged-user-id))))
        ;; Сновa выход
        (logout-user logged-user-id))
      ;; Попытка логина с неверными credentials
      (let ((logged-user-id))
        (aif (check-auth-data (get-auth-data (list (cons 'email email)
                                                   (cons 'password "wrong-password"))))
             (progn
               (login-user-success it)
               (setf logged-user-id it))
             (login-user-fail))
        ;; Проверим, что не удалось успешно залогиниться
        (assert (equal nil logged-user-id))))
  #+END_SRC
